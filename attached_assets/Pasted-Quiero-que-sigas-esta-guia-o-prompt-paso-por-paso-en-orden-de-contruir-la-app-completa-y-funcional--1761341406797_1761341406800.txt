Quiero que sigas esta guia o prompt paso por paso, en orden de contruir la app completa y funcional, sin objeciones, no cometas errores, contruye la app totalmente funcional, evita llenarla de mock data (esta app es para produccion, puedes poner los ejemplos que dicta el prompt, pero la app debe estar lista para produccion).

Solo empieza a contruir, cualquier configuracion que no puedas hacer relacionada con clerk, me la dejas en la guia, yo lo hare manualmente, solo quiero que cumplas con los requerimientos del prompt completo. Empieza a contruir y no pares hasta que este completa.

üöÄ PROMPT COMPLETO PARA CONSTRUCCI√ìN DE AUTOCREA EN BOLT

üìå INSTRUCCIONES CR√çTICAS PARA BOLT
Lee cuidadosamente todo este prompt antes de comenzar. Esta aplicaci√≥n debe ser construida EXACTAMENTE como se especifica, sin omitir ninguna funcionalidad.

üéØ OBJETIVO
Crear AUTOCREA, una plataforma web completa tipo Replit que permite generar aplicaciones web funcionales mediante prompts en lenguaje natural, potenciada por JoxCoder (modelo de IA). La app debe tener un dise√±o moderno con los colores del ecosistema JoxAI y estar 100% funcional.

üé® DISE√ëO Y ESTILO VISUAL
Paleta de Colores (del ecosistema JoxAI)
css/* Colores principales /
--primary: #4A90E2;        / Azul el√©ctrico /
--secondary: #9B59B6;      / P√∫rpura /
--accent: #00D9FF;         / Cian brillante /
--background: #0A0E27;     / Negro profundo /
--surface: #1a1f3a;        / Gris oscuro azulado */
--border: rgba(74, 144, 226, 0.2);

/* Gradientes */
--gradient-primary: linear-gradient(135deg, #4A90E2 0%, #9B59B6 100%);
--gradient-accent: linear-gradient(135deg, #00D9FF 0%, #4A90E2 100%);
--gradient-bg: linear-gradient(180deg, #0A0E27 0%, #1a1f3a 50%, #0A0E27 100%);

/* Colores de estado */
--success: #10B981;
--warning: #F59E0B;
--error: #EF4444;
--info: #3B82F6;



### Referencias Visuales

**Card de AUTOCREA en JoxAI.org:**
- Fondo: Gradiente oscuro con borde azul (#4A90E2) brillante
- √çcono: S√≠mbolo de c√≥digo (`</>`) en azul el√©ctrico
- Texto: Blanco brillante sobre fondo oscuro
- Badge "Beta": Esquina superior derecha, azul brillante
- Efectos: Glassmorphism sutil, sombra con glow azul

**Estilo General:**
- **Dark mode obligatorio** (fondo #0A0E27)
- **Glassmorphism** en cards y modals
- **Gradientes sutiles** en backgrounds y botones
- **Bordes con glow** (box-shadow con color primario)
- **Animaciones fluidas** (transitions 0.3s ease)
- **Tipograf√≠a moderna**: Inter o SF Pro Display

---

## üèóÔ∏è ESTRUCTURA DE LA APLICACI√ìN

### P√°ginas Principales
/                       ‚Üí Landing Page
/sign-in               ‚Üí Login (Clerk)
/sign-up               ‚Üí Registro (Clerk)
/dashboard             ‚Üí Vista de proyectos
/projects/new          ‚Üí Crear nuevo proyecto
/projects/[id]         ‚Üí IDE completo
/settings/account      ‚Üí Configuraci√≥n de cuenta
/settings/billing      ‚Üí Facturaci√≥n y planes
/settings/usage        ‚Üí Uso de cr√©ditos
/docs                  ‚Üí Documentaci√≥n

üì¶ STACK TECNOL√ìGICO
typescript// Framework
Next.js 14+ (App Router)
React 18+
TypeScript

// Styling
TailwindCSS
shadcn/ui components

// Auth
Clerk (pre-integrado en Bolt)

// Pagos
Stripe (API key ya configurada en Bolt)

// Editor
Monaco Editor (@monaco-editor/react)

// Terminal
Xterm.js + xterm-addon-fit

// Ejecuci√≥n de c√≥digo
WebContainers (@webcontainer/api)

// Estado
Zustand

// Iconos
Lucide React

üéØ FUNCIONALIDADES CORE

LANDING PAGE (/) Secciones: tsx// Hero Section
<section className="relative min-h-screen flex items-center justify-center bg-gradient-to-br from-[#0A0E27] via-[#1a1f3a] to-[#0A0E27]"> <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(74,144,226,0.1),transparent_50%)]" /> <div className="container mx-auto px-6 text-center relative z-10"> <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-[#4A90E2]/10 border border-[#4A90E2]/30 mb-8"> <Sparkles className="w-4 h-4 text-[#00D9FF]" /> <span className="text-sm text-[#00D9FF]">Innovaci√≥n en IA</span> </div>

<h1 className="text-6xl md:text-8xl font-bold mb-6 bg-gradient-to-r from-white via-[#00D9FF] to-[#4A90E2] bg-clip-text text-transparent">
  DE IDEA A LA
  <br />
  MATERIALIZACI√ìN
</h1>

<p className="text-xl text-gray-400 max-w-2xl mx-auto mb-8">
  Transforma ideas en aplicaciones web completas con JoxCoder v1. 
  Desarrollo aut√≥nomo, c√≥digo limpio, deploy instant√°neo.
</p>

<div className="flex gap-4 justify-center">
  <Button 
    size="lg" 
    className="bg-gradient-to-r from-[#4A90E2] to-[#9B59B6] hover:opacity-90 text-lg px-8"
  >
    <Sparkles className="mr-2" />
    Comenzar Gratis - 100 tokens
  </Button>
  
  <Button 
    size="lg" 
    variant="outline"
    className="border-[#4A90E2]/50 hover:bg-[#4A90E2]/10"
  >
    <Play className="mr-2" />
    Ver Demo
  </Button>
</div>

<div className="flex gap-8 justify-center mt-12 text-sm text-gray-500">
  <div className="flex items-center gap-2">
    <Users className="w-4 h-4 text-[#00D9FF]" />
    <span>10,000+ usuarios activos</span>
  </div>
  <div className="flex items-center gap-2">
    <Star className="w-4 h-4 text-[#00D9FF]" />
    <span>4.9/5 valoraci√≥n</span>
  </div>
  <div className="flex items-center gap-2">
    <Shield className="w-4 h-4 text-[#00D9FF]" />
    <span>100% privado y seguro</span>
  </div>
</div>
</div> </section>
// C√≥mo Funciona

<section className="py-24 bg-[#0A0E27]"> <div className="container mx-auto px-6"> <h2 className="text-4xl font-bold text-center mb-16"> Crea Apps en 3 Pasos </h2>

<div className="grid md:grid-cols-3 gap-8">
  <StepCard 
    number="1"
    icon={MessageSquare}
    title="Describe tu aplicaci√≥n"
    description="Explica qu√© quieres crear en lenguaje natural"
  />
  <StepCard 
    number="2"
    icon={Sparkles}
    title="JoxCoder la genera"
    description="Nuestra IA crea c√≥digo limpio en segundos"
  />
  <StepCard 
    number="3"
    icon={Rocket}
    title="Edita y deploy"
    description="Personaliza en el IDE y publica en 1 click"
  />
</div>
</div> </section>
// Ejemplos Reales

<section className="py-24 bg-gradient-to-b from-[#0A0E27] to-[#1a1f3a]"> <div className="container mx-auto px-6"> <h2 className="text-4xl font-bold text-center mb-4"> Aplicaciones Reales Generadas </h2> <p className="text-gray-400 text-center mb-16"> Estos proyectos fueron creados con solo una descripci√≥n </p>

<div className="grid md:grid-cols-3 gap-6">
  <ExampleCard
    title="Landing de Restaurante"
    description="Hero, men√∫ con categor√≠as, galer√≠a, formulario contacto"
    tokens="5,234 tokens"
    time="38 segundos"
    image="/examples/restaurant.png"
    tech={['React', 'Tailwind', 'Framer Motion']}
  />
  
  <ExampleCard
    title="Dashboard Analytics"
    description="Gr√°ficos interactivos, tablas, filtros, exportaci√≥n"
    tokens="12,567 tokens"
    time="1 minuto 12s"
    tech={['Next.js', 'Recharts', 'shadcn/ui']}
  />
  
  <ExampleCard
    title="E-commerce Store"
    description="Grid de productos, carrito, checkout, panel admin"
    tokens="18,923 tokens"
    time="1 minuto 45s"
    tech={['Next.js', 'Stripe', 'PostgreSQL']}
  />
</div>
</div> </section>
// Planes y Precios

<section className="py-24 bg-[#0A0E27]"> <PricingSection /> </section>
// Features Grid

<section className="py-24 bg-gradient-to-t from-[#0A0E27] to-[#1a1f3a]"> <FeaturesGrid /> </section>
// CTA Final

<section className="py-24 bg-[#0A0E27]"> <div className="container mx-auto px-6 text-center"> <h2 className="text-5xl font-bold mb-6"> ¬øListo para crear tu pr√≥xima app? </h2> <p className="text-xl text-gray-400 mb-8"> √önete a miles de creadores que conf√≠an en AUTOCREA </p> <Button size="lg" className="bg-gradient-to-r from-[#4A90E2] to-[#9B59B6]"> Comenzar Ahora - Gratis </Button> </div> </section>
DASHBOARD DE PROYECTOS (/dashboard) Layout: tsxexport default function DashboardPage() { const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid'); const [sortBy, setSortBy] = useState<'recent' | 'name' | 'credits'>('recent');
return (
<div className="min-h-screen bg-[#0A0E27]">
{/* Header */}
<header className="border-b border-[#4A90E2]/20 bg-[#1a1f3a]/50 backdrop-blur-xl sticky top-0 z-50">
<div className="container mx-auto px-6 py-4 flex items-center justify-between">
<div className="flex items-center gap-8">
<Link href="/" className="flex items-center gap-2">
<div className="w-8 h-8 rounded-lg bg-gradient-to-br from-[#4A90E2] to-[#9B59B6] flex items-center justify-center">
<Code className="w-5 h-5 text-white" />
</div>
<span className="text-xl font-bold">AUTOCREA</span>
</Link>


        <nav className="flex gap-6">
          <Link href="/dashboard" className="text-[#00D9FF] font-medium">
            Proyectos
          </Link>
          <Link href="/templates" className="text-gray-400 hover:text-white">
            Plantillas
          </Link>
          <Link href="/docs" className="text-gray-400 hover:text-white">
            Documentaci√≥n
          </Link>
        </nav>
      </div>
      
      <div className="flex items-center gap-4">
        <div className="flex items-center gap-2 px-4 py-2 rounded-lg bg-[#4A90E2]/10 border border-[#4A90E2]/30">
          <Zap className="w-4 h-4 text-[#00D9FF]" />
          <span className="text-sm font-medium">
            {credits.toLocaleString()} cr√©ditos
          </span>
        </div>
        
        <Button variant="outline" size="sm">
          <Plus className="w-4 h-4 mr-2" />
          Comprar
        </Button>
        
        <UserButton />
      </div>
    </div>
  </header>

  {/* Main Content */}
  <main className="container mx-auto px-6 py-8">
    {/* Top Bar */}
    <div className="flex items-center justify-between mb-8">
      <div>
        <h1 className="text-3xl font-bold mb-2">Mis Proyectos</h1>
        <p className="text-gray-400">{projects.length} proyectos creados</p>
      </div>
      
      <div className="flex items-center gap-4">
        {/* Search */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-500" />
          <input
            type="text"
            placeholder="Buscar proyectos..."
            className="pl-10 pr-4 py-2 bg-[#1a1f3a] border border-[#4A90E2]/20 rounded-lg focus:outline-none focus:border-[#4A90E2] w-64"
          />
        </div>
        
        {/* View Toggle */}
        <div className="flex gap-2 p-1 bg-[#1a1f3a] rounded-lg">
          <button
            onClick={() => setViewMode('grid')}
            className={viewMode === 'grid' ? 'p-2 bg-[#4A90E2]/20 rounded' : 'p-2 hover:bg-[#4A90E2]/10 rounded'}
          >
            <Grid3x3 className="w-4 h-4" />
          </button>
          <button
            onClick={() => setViewMode('list')}
            className={viewMode === 'list' ? 'p-2 bg-[#4A90E2]/20 rounded' : 'p-2 hover:bg-[#4A90E2]/10 rounded'}
          >
            <List className="w-4 h-4" />
          </button>
        </div>
        
        {/* Sort */}
        <Select value={sortBy} onValueChange={setSortBy}>
          <SelectTrigger className="w-40 bg-[#1a1f3a] border-[#4A90E2]/20">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="recent">M√°s recientes</SelectItem>
            <SelectItem value="name">Nombre A-Z</SelectItem>
            <SelectItem value="credits">Cr√©ditos usados</SelectItem>
          </SelectContent>
        </Select>
        
        {/* New Project Button */}
        <Button 
          size="lg"
          className="bg-gradient-to-r from-[#4A90E2] to-[#9B59B6] hover:opacity-90"
          onClick={() => router.push('/projects/new')}
        >
          <Plus className="w-5 h-5 mr-2" />
          Nuevo Proyecto
        </Button>
      </div>
    </div>

    {/* Projects Grid */}
    {viewMode === 'grid' ? (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {projects.map((project) => (
          <ProjectCard key={project.id} project={project} />
        ))}
      </div>
    ) : (
      <div className="space-y-4">
        {projects.map((project) => (
          <ProjectListItem key={project.id} project={project} />
        ))}
      </div>
    )}

    {/* Empty State */}
    {projects.length === 0 && (
      <div className="text-center py-24">
        <div className="w-24 h-24 mx-auto mb-6 rounded-full bg-[#4A90E2]/10 flex items-center justify-center">
          <Sparkles className="w-12 h-12 text-[#4A90E2]" />
        </div>
        <h3 className="text-2xl font-bold mb-2">
          Crea tu primer proyecto
        </h3>
        <p className="text-gray-400 mb-6">
          Describe tu idea y deja que JoxCoder la haga realidad
        </p>
        <Button 
          size="lg"
          className="bg-gradient-to-r from-[#4A90E2] to-[#9B59B6]"
          onClick={() => router.push('/projects/new')}
        >
          <Plus className="w-5 h-5 mr-2" />
          Crear Proyecto
        </Button>
      </div>
    )}
  </main>
</div>
);
}

// Project Card Component
function ProjectCard({ project }: { project: Project }) {
return (
<div className="group relative">
{/* Card /}
<div className="bg-gradient-to-br from-[#1a1f3a] to-[#0A0E27] rounded-xl border border-[#4A90E2]/20 p-6 hover:border-[#4A90E2]/50 transition-all duration-300 cursor-pointer">
{/ Preview Thumbnail */}
<div className="aspect-video mb-4 rounded-lg bg-[#0A0E27] border border-[#4A90E2]/10 overflow-hidden">
<img
src={project.thumbnail || '/placeholder.svg'}
alt={project.name}
className="w-full h-full object-cover"
/>
</div>


    {/* Project Info */}
    <div className="space-y-3">
      <div className="flex items-start justify-between">
        <h3 className="font-semibold text-lg truncate flex-1">
          {project.name}
        </h3>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="sm">
              <MoreVertical className="w-4 h-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent>
            <DropdownMenuItem onClick={() => router.push(`/projects/${project.id}`)}>
              <Pencil className="w-4 h-4 mr-2" />
              Editar
            </DropdownMenuItem>
            <DropdownMenuItem>
              <Copy className="w-4 h-4 mr-2" />
              Duplicar
            </DropdownMenuItem>
            <DropdownMenuItem>
              <ExternalLink className="w-4 h-4 mr-2" />
              Ver deploy
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem className="text-red-500">
              <Trash2 className="w-4 h-4 mr-2" />
              Eliminar
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      
      <p className="text-sm text-gray-400 line-clamp-2">
        {project.description}
      </p>
      
      {/* Metadata */}
      <div className="flex items-center gap-4 text-xs text-gray-500">
        <span className="flex items-center gap-1">
          <Clock className="w-3 h-3" />
          {formatRelativeTime(project.updatedAt)}
        </span>
        <span className="flex items-center gap-1">
          <Zap className="w-3 h-3 text-[#00D9FF]" />
          {project.creditsUsed.toLocaleString()} cr√©ditos
        </span>
      </div>
      
      {/* Tech Stack */}
      <div className="flex flex-wrap gap-2">
        {project.stack.map((tech) => (
          <span
            key={tech}
            className="px-2 py-1 text-xs bg-[#4A90E2]/10 text-[#00D9FF] rounded-md border border-[#4A90E2]/20"
          >
            {tech}
          </span>
        ))}
      </div>
    </div>
    
    {/* Open Button */}
    <Button 
      className="w-full mt-4 bg-gradient-to-r from-[#4A90E2] to-[#9B59B6] hover:opacity-90"
      onClick={() => router.push(`/projects/${project.id}`)}
    >
      Abrir Proyecto
      <ArrowRight className="w-4 h-4 ml-2" />
    </Button>
  </div>
</div>
);
}

IDE COMPLETO (/projects/[id]) LAYOUT EXACTO COMO REPLIT: tsxexport default function IDEPage({ params }: { params: { id: string } }) { // State const [activeFile, setActiveFile] = useState<string | null>(null); const [openTabs, setOpenTabs] = useState<string[]>([]); const [terminalVisible, setTerminalVisible] = useState(true); const [previewUrl, setPreviewUrl] = useState<string | null>(null); const [isRunning, setIsRunning] = useState(false);
// Layout similar a Replit
return (
<div className="h-screen flex flex-col bg-[#0A0E27]">
{/* Top Bar */}
<header className="h-12 flex items-center justify-between px-4 bg-[#1a1f3a] border-b border-[#4A90E2]/20">
<div className="flex items-center gap-4">
<Link href="/dashboard" className="flex items-center gap-2 hover:opacity-80">
<ArrowLeft className="w-4 h-4" />
<div className="flex items-center gap-2">
<Code className="w-5 h-5 text-[#4A90E2]" />
<span className="font-semibold">{project.name}</span>
</div>
</Link>


      <div className="flex items-center gap-2 text-sm text-gray-400">
        <span>{openTabs.length} archivos abiertos</span>
      </div>
    </div>
    
    <div className="flex items-center gap-3">
      {/* Status Indicator */}
      <div className="flex items-center gap-2">
        <div className={`w-2 h-2 rounded-full ${isRunning ? 'bg-green-500 animate-pulse' : 'bg-gray-500'}`} />
        <span className="text-sm text-gray-400">
          {isRunning ? 'Running' : 'Stopped'}
        </span>
      </div>
      
      {/* Run Button */}
      <Button 
        size="sm"
        className="bg-green-600 hover:bg-green-700"
        onClick={handleRun}
        disabled={isRunning}
      >
        <Play className="w-4 h-4 mr-2" />
        Run
      </Button>
      
      {/* Deploy Button */}
      <Button 
        size="sm"
        className="bg-gradient-to-r from-[#4A90E2] to-[#9B59B6]"
        onClick={handleDeploy}
      >
        <Rocket className="w-4 h-4 mr-2" />
        Deploy
      </Button>
      
      {/* Settings */}
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="ghost" size="sm">
            <Settings className="w-4 h-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent>
          <DropdownMenuItem>
            <Github className="w-4 h-4 mr-2" />
            Conectar con GitHub
          </DropdownMenuItem>
          <DropdownMenuItem>
            <Download className="w-4 h-4 mr-2" />
            Descargar c√≥digo
          </DropdownMenuItem>
          <DropdownMenuSeparator />
          <DropdownMenuItem>
            <Settings className="w-4 h-4 mr-2" />
            Configuraci√≥n del proyecto
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
      
      <UserButton />
    </div>
  </header>

  {/* Main IDE Area */}
  <div className="flex-1 flex overflow-hidden">
    {/* Sidebar: File Tree */}
    <div className="w-64 bg-[#1a1f3a] border-r border-[#4A90E2]/20 flex flex-col">
      <div className="p-3 border-b border-[#4A90E2]/20 flex items-center justify-between">
        <span className="text-sm font-semibold text-gray-400">FILES</span>
        <div className="flex gap-1">
          <Button variant="ghost" size="sm" onClick={handleNewFile}>
            <FilePlus className="w-4 h-4" />
          </Button>
          <Button variant="ghost" size="sm" onClick={handleNewFolder}>
            <FolderPlus className="w-4 h-4" />
          </Button>
        </div>
      </div>
      
      <div className="flex-1 overflow-y-auto p-2">
        <FileTree 
          files={project.files}
          activeFile={activeFile}
          onFileClick={handleFileClick}
        />
      </div>
    </div>

    {/* Center: Editor + Terminal */}
    <div className="flex-1 flex flex-col">
      {/* Tabs */}
      <div className="h-10 flex items-center gap-1 px-2 bg-[#0A0E27] border-b border-[#4A90E2]/20 overflow-x-auto">
        {openTabs.map((filePath) => (
          <div
            key={filePath}
            className={`
              flex items-center gap-2 px-3 py-1.5 rounded-t-lg cursor-pointer
              ${activeFile === filePath 
                ? 'bg-[#1a1f3a] border-t-2 border-[#4A90E2]' 
                : 'bg-[#0A0E27] hover:bg-[#1a1f3a]/50'}
            `}
            onClick={() => setActiveFile(filePath)}
          >
            <FileIcon filename={filePath} className="w-4 h-4" />
            <span className="text-sm">{getFileName(filePath)}</span>
            <button
              onClick={(e) => {
                e.stopPropagation();
                handleCloseTab(filePath);
              }}
              className="hover:bg-red-500/20 rounded p-0.5"
            >
              <X className="w-3 h-3" />
            </button>
          </div>
        ))}
      </div>

      {/* Monaco Editor */}
      <div className="flex-1 relative">
        {activeFile ? (
          <MonacoEditor
            path={activeFile}
            language={getLanguageFromFile(activeFile)}
            value={files[activeFile]}
            onChange={(value) => handleFileChange(activeFile, value)}
            theme="vs-dark"
            options={{
              fontSize: 14,
              minimap: { enabled: true },
              lineNumbers: 'on',
              roundedSelection: false,
              scrollBeyondLastLine: false,
              automaticLayout: true,
              tabSize: 2,
            }}
          />
        ) : (
          <div className="flex items-center justify-center h-full text-gray-500">
            <div className="text-center">
              <FileCode className="w-16 h-16 mx-auto mb-4 opacity-50" />
              <p>Selecciona un archivo para editar</p>
            </div>
          </div>
        )}
      </div>

      {/* Terminal/Console (collapsible) */}
      {terminalVisible && (
        <div className="h-64 border-t border-[#4A90E2]/20 bg-[#0A0E27]">
          <div className="h-10 flex items-center justify-between px-4 bg-[#1a1f3a] border-b border-[#4A90E2]/20">
            <div className="flex gap-4">
              <button className="text-sm font-semibold text-[#00D9FF]">
                Terminal
              </button>
              <button className="text-sm text-gray-400 hover:text-white">
                Console
              </button>
            </div>
            <button onClick={() => setTerminalVisible(false)}>
              <ChevronDown className="w-4 h-4" />
            </button>
          </div>
          
          <XTerm 
            className="h-[calc(100%-2.5rem)] p-2"
            onCommand={handleTerminalCommand}
          />
        </div>
      )}
      
      {!terminalVisible && (
        <button
          onClick={() => setTerminalVisible(true)}
          className="h-8 w-full bg-[#1a1f3a] border-t border-[#4A90E2]/20 flex items-center justify-center hover:bg-[#1a1f3a]/80"
        >
          <ChevronUp className="w-4 h-4" />
        </button>
      )}
    </div>

    {/* Right Panel: Live Preview */}
    <div className="w-[40%] bg-[#1a1f3a] border-l border-[#4A90E2]/20 flex flex-col">
      <div className="h-10 flex items-center justify-between px-4 bg-[#ReintentarClaude a√∫n no tiene la capacidad de ejecutar el c√≥digo que genera.JContinuarRecuerda que el prompt debe quedar perfectotsx          <div className="h-10 flex items-center justify-between px-4 bg-[#0A0E27] border-b border-[#4A90E2]/20">
        <div className="flex items-center gap-2">
          <Monitor className="w-4 h-4 text-[#00D9FF]" />
          <span className="text-sm font-semibold">Preview</span>
        </div>
        
        <div className="flex items-center gap-2">
          <button 
            onClick={handleRefreshPreview}
            className="p-1.5 hover:bg-[#4A90E2]/10 rounded"
          >
            <RefreshCw className="w-4 h-4" />
          </button>
          
          <button 
            onClick={handleOpenInNewTab}
            className="p-1.5 hover:bg-[#4A90E2]/10 rounded"
          >
            <ExternalLink className="w-4 h-4" />
          </button>
        </div>
      </div>
      
      <div className="flex-1 bg-white">
        {previewUrl ? (
          <iframe
            src={previewUrl}
            className="w-full h-full border-0"
            title="Preview"
            sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-modals"
          />
        ) : (
          <div className="flex items-center justify-center h-full text-gray-500 bg-[#0A0E27]">
            <div className="text-center">
              <Eye className="w-16 h-16 mx-auto mb-4 opacity-50" />
              <p className="mb-2">Vista previa no disponible</p>
              <Button 
                size="sm" 
                variant="outline"
                onClick={handleRun}
              >
                <Play className="w-4 h-4 mr-2" />
                Ejecutar para ver preview
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
</div>
);
}

CREAR NUEVO PROYECTO (/projects/new) Flujo de Generaci√≥n con IA: tsxexport default function NewProjectPage() { const [step, setStep] = useState<'prompt' | 'template' | 'generating' | 'complete'>('prompt'); const [description, setDescription] = useState(''); const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null); const [framework, setFramework] = useState<'react' | 'next' | 'vue' | 'vanilla'>('react'); const [estimatedCredits, setEstimatedCredits] = useState(0); const [generationProgress, setGenerationProgress] = useState(0); const [currentFile, setCurrentFile] = useState('');
const { user } = useUser();
const credits = useQuery(api.credits.getUserCredits, { userId: user?.id });

// Estimaci√≥n en tiempo real
useEffect(() => {
const estimated = Math.ceil(description.length / 3.5) * 2.5;
setEstimatedCredits(estimated);
}, [description]);

return (
<div className="min-h-screen bg-gradient-to-br from-[#0A0E27] via-[#1a1f3a] to-[#0A0E27]">
{/* Header con cr√©ditos */}
<header className="border-b border-[#4A90E2]/20 bg-[#1a1f3a]/50 backdrop-blur-xl sticky top-0 z-50">
<div className="container mx-auto px-6 py-4 flex items-center justify-between">
<Link href="/dashboard" className="flex items-center gap-2 hover:opacity-80">
<ArrowLeft className="w-5 h-5" />
<span>Volver a Proyectos</span>
</Link>


      <div className="flex items-center gap-3">
        <div className="flex items-center gap-2 px-4 py-2 rounded-lg bg-[#4A90E2]/10 border border-[#4A90E2]/30">
          <Zap className="w-4 h-4 text-[#00D9FF]" />
          <span className="text-sm font-medium">
            {credits?.credits.toLocaleString() || '0'} cr√©ditos disponibles
          </span>
        </div>
        <UserButton />
      </div>
    </div>
  </header>

  <main className="container mx-auto px-6 py-12">
    {step === 'prompt' && (
      <div className="max-w-4xl mx-auto space-y-8">
        {/* Hero */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-[#4A90E2]/10 border border-[#4A90E2]/30 mb-6">
            <Sparkles className="w-4 h-4 text-[#00D9FF]" />
            <span className="text-sm text-[#00D9FF]">Potenciado por JoxCoder v1</span>
          </div>
          
          <h1 className="text-5xl font-bold mb-4 bg-gradient-to-r from-white via-[#00D9FF] to-[#4A90E2] bg-clip-text text-transparent">
            ¬øQu√© quieres crear hoy?
          </h1>
          <p className="text-xl text-gray-400">
            Describe tu aplicaci√≥n y d√©janos hacer el resto
          </p>
        </div>

        {/* Tabs: Prompt vs Template */}
        <Tabs defaultValue="prompt" className="w-full">
          <TabsList className="grid w-full grid-cols-2 bg-[#1a1f3a] p-1">
            <TabsTrigger value="prompt" className="data-[state=active]:bg-[#4A90E2]/20">
              <MessageSquare className="w-4 h-4 mr-2" />
              Describir con texto
            </TabsTrigger>
            <TabsTrigger value="template" className="data-[state=active]:bg-[#4A90E2]/20">
              <LayoutTemplate className="w-4 h-4 mr-2" />
              Usar plantilla
            </TabsTrigger>
          </TabsList>

          {/* Prompt Tab */}
          <TabsContent value="prompt" className="space-y-6 mt-6">
            <Card className="p-6 bg-gradient-to-br from-[#1a1f3a] to-[#0A0E27] border-[#4A90E2]/20">
              <div className="space-y-4">
                {/* Framework Selector */}
                <div>
                  <label className="block text-sm font-medium mb-3">
                    Framework (opcional)
                  </label>
                  <div className="grid grid-cols-4 gap-3">
                    {[
                      { id: 'react', name: 'React', icon: '‚öõÔ∏è' },
                      { id: 'next', name: 'Next.js', icon: '‚ñ≤' },
                      { id: 'vue', name: 'Vue', icon: 'üíö' },
                      { id: 'vanilla', name: 'HTML/CSS/JS', icon: 'üé®' },
                    ].map((fw) => (
                      <button
                        key={fw.id}
                        onClick={() => setFramework(fw.id as any)}
                        className={`
                          p-4 rounded-lg border-2 transition-all
                          ${framework === fw.id 
                            ? 'border-[#4A90E2] bg-[#4A90E2]/10' 
                            : 'border-[#4A90E2]/20 hover:border-[#4A90E2]/50 bg-[#1a1f3a]'}
                        `}
                      >
                        <div className="text-2xl mb-2">{fw.icon}</div>
                        <div className="text-sm font-medium">{fw.name}</div>
                      </button>
                    ))}
                  </div>
                </div>

                {/* Prompt Textarea */}
                <div>
                  <label className="block text-sm font-medium mb-3">
                    Describe tu aplicaci√≥n en detalle
                  </label>
                  <Textarea
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    placeholder="Ejemplo:
Quiero crear una landing page para mi cafeter√≠a 'Caf√© Aroma' con las siguientes secciones:

Hero Section:

Imagen de fondo de una taza de caf√©
T√≠tulo: 'El mejor caf√© de la ciudad'
Bot√≥n CTA: 'Ver men√∫'
Men√∫:

Categor√≠as: Caf√©s Calientes, Caf√©s Fr√≠os, Postres
Cards con imagen, nombre, descripci√≥n y precio
Bot√≥n 'Ordenar' en cada item
Galer√≠a de Fotos:

Grid de 6 fotos del local y productos
Efecto hover con zoom
Nosotros:

Historia de la cafeter√≠a
Misi√≥n y valores
Contacto:

Formulario: nombre, email, mensaje
Mapa de ubicaci√≥n (Google Maps embed)
Horarios de atenci√≥n
Footer:

Links a redes sociales
Copyright
Estilo: Moderno y acogedor, colores c√°lidos (marrones, beige, crema). Responsive para m√≥viles."
rows={20}
className="resize-none font-mono text-sm bg-[#0A0E27] border-[#4A90E2]/20 focus:border-[#4A90E2]"
/>
<p className="text-xs text-gray-500 mt-2">
üí° Tip: Cuanto m√°s detallado, mejor ser√° el resultado. Menciona secciones, funcionalidades, estilo visual, colores, interacciones, etc.
</p>
</div>


                {/* Estimaci√≥n de Cr√©ditos */}
                <Alert className="bg-[#4A90E2]/10 border-[#4A90E2]/30">
                  <Zap className="w-4 h-4 text-[#00D9FF]" />
                  <AlertTitle className="text-[#00D9FF]">
                    Estimaci√≥n de Cr√©ditos
                  </AlertTitle>
                  <AlertDescription className="text-gray-300">
                    Esta generaci√≥n consumir√° aproximadamente{' '}
                    <span className="font-bold text-white">
                      {estimatedCredits.toLocaleString()} cr√©ditos
                    </span>
                    {estimatedCredits > (credits?.credits || 0) && (
                      <span className="block mt-2 text-red-400 flex items-center gap-2">
                        <AlertCircle className="w-4 h-4" />
                        Cr√©ditos insuficientes. 
                        <Button variant="link" className="h-auto p-0 text-red-400">
                          Comprar m√°s cr√©ditos
                        </Button>
                      </span>
                    )}
                  </AlertDescription>
                </Alert>

                {/* Generate Button */}
                <Button
                  onClick={handleGenerate}
                  disabled={!description.trim() || estimatedCredits > (credits?.credits || 0)}
                  className="w-full h-14 text-lg bg-gradient-to-r from-[#4A90E2] to-[#9B59B6] hover:opacity-90 disabled:opacity-50"
                  size="lg"
                >
                  <Sparkles className="w-5 h-5 mr-2" />
                  Generar Aplicaci√≥n
                </Button>
              </div>
            </Card>

            {/* Tips */}
            <Card className="p-6 bg-[#1a1f3a]/50 border-[#4A90E2]/10">
              <h3 className="font-semibold mb-3 flex items-center gap-2">
                <Lightbulb className="w-5 h-5 text-[#00D9FF]" />
                Consejos para mejores resultados
              </h3>
              <ul className="space-y-2 text-sm text-gray-400">
                <li className="flex items-start gap-2">
                  <CheckCircle2 className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
                  <span>Especifica todas las secciones que necesitas</span>
                </li>
                <li className="flex items-start gap-2">
                  <CheckCircle2 className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
                  <span>Describe el estilo visual (colores, fuentes, espaciado)</span>
                </li>
                <li className="flex items-start gap-2">
                  <CheckCircle2 className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
                  <span>Menciona si necesita ser responsive (m√≥vil/tablet)</span>
                </li>
                <li className="flex items-start gap-2">
                  <CheckCircle2 className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
                  <span>Indica interacciones (formularios, animaciones, hover effects)</span>
                </li>
                <li className="flex items-start gap-2">
                  <CheckCircle2 className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
                  <span>Puedes mencionar tecnolog√≠as espec√≠ficas (TailwindCSS, Framer Motion, etc.)</span>
                </li>
              </ul>
            </Card>
          </TabsContent>

          {/* Template Tab */}
          <TabsContent value="template" className="space-y-6 mt-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {templates.map((template) => (
                <Card
                  key={template.id}
                  className={`
                    cursor-pointer transition-all
                    ${selectedTemplate === template.id 
                      ? 'border-[#4A90E2] bg-[#4A90E2]/5' 
                      : 'border-[#4A90E2]/20 hover:border-[#4A90E2]/50'}
                  `}
                  onClick={() => setSelectedTemplate(template.id)}
                >
                  <div className="aspect-video bg-[#0A0E27] rounded-t-lg overflow-hidden">
                    <img 
                      src={template.thumbnail}
                      alt={template.name}
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <div className="p-4 space-y-3">
                    <div>
                      <h3 className="font-semibold text-lg">{template.name}</h3>
                      <p className="text-sm text-gray-400 mt-1">
                        {template.description}
                      </p>
                    </div>
                    
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-500">
                        {template.estimatedCredits.toLocaleString()} cr√©ditos
                      </span>
                      <div className="flex gap-1">
                        {template.features.slice(0, 3).map((feature) => (
                          <span
                            key={feature}
                            className="px-2 py-1 bg-[#4A90E2]/10 text-[#00D9FF] rounded text-xs"
                          >
                            {feature}
                          </span>
                        ))}
                      </div>
                    </div>

                    {selectedTemplate === template.id && (
                      <Button 
                        className="w-full bg-gradient-to-r from-[#4A90E2] to-[#9B59B6]"
                        onClick={() => handleGenerateFromTemplate(template.id)}
                      >
                        <Sparkles className="w-4 h-4 mr-2" />
                        Usar esta plantilla
                      </Button>
                    )}
                  </div>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    )}

    {/* Generation Progress */}
    {step === 'generating' && (
      <div className="max-w-2xl mx-auto">
        <Card className="p-8 bg-gradient-to-br from-[#1a1f3a] to-[#0A0E27] border-[#4A90E2]/20 text-center">
          <div className="mb-8">
            <div className="w-20 h-20 mx-auto mb-4 rounded-full bg-gradient-to-r from-[#4A90E2] to-[#9B59B6] flex items-center justify-center animate-pulse">
              <Sparkles className="w-10 h-10 text-white" />
            </div>
            <h2 className="text-2xl font-bold mb-2">
              JoxCoder est√° creando tu aplicaci√≥n...
            </h2>
            <p className="text-gray-400">
              Esto puede tomar entre 30 segundos y 2 minutos
            </p>
          </div>

          {/* Progress Bar */}
          <div className="space-y-3 mb-6">
            <div className="flex items-center justify-between text-sm">
              <span className="text-gray-400">Progreso</span>
              <span className="font-medium">{generationProgress}%</span>
            </div>
            <Progress 
              value={generationProgress} 
              className="h-3 bg-[#0A0E27]"
            />
          </div>

          {/* Current Action */}
          {currentFile && (
            <div className="bg-[#0A0E27] rounded-lg p-4 border border-[#4A90E2]/20">
              <p className="text-sm text-gray-400 mb-2">Creando archivo:</p>
              <p className="font-mono text-[#00D9FF]">{currentFile}</p>
            </div>
          )}

          {/* Generation Steps */}
          <div className="mt-8 space-y-3 text-left">
            {[
              { label: 'Analizando descripci√≥n', status: 'complete' },
              { label: 'Generando estructura', status: 'complete' },
              { label: 'Creando componentes', status: 'active' },
              { label: 'Aplicando estilos', status: 'pending' },
              { label: 'Optimizando c√≥digo', status: 'pending' },
            ].map((step, idx) => (
              <div key={idx} className="flex items-center gap-3">
                {step.status === 'complete' && (
                  <CheckCircle2 className="w-5 h-5 text-green-500" />
                )}
                {step.status === 'active' && (
                  <Loader2 className="w-5 h-5 text-[#4A90E2] animate-spin" />
                )}
                {step.status === 'pending' && (
                  <div className="w-5 h-5 rounded-full border-2 border-gray-600" />
                )}
                <span className={step.status === 'active' ? 'text-white font-medium' : 'text-gray-400'}>
                  {step.label}
                </span>
              </div>
            ))}
          </div>
        </Card>
      </div>
    )}
  </main>
</div>
);
}

SISTEMA DE CR√âDITOS/TOKENS Implementaci√≥n Completa: typescript// convex/credits.ts import { v } from "convex/values"; import { mutation, query } from "./_generated/server";
// Obtener cr√©ditos de usuario
export const getUserCredits = query({
args: { userId: v.string() },
handler: async (ctx, { userId }) => {
const user = await ctx.db
.query("users")
.filter((q) => q.eq(q.field("clerkId"), userId))
.first();


if (!user) {
  throw new Error("Usuario no encontrado");
}

return {
  credits: user.credits || 0,
  plan: user.plan || 'free',
  creditsUsedThisMonth: user.creditsUsedThisMonth || 0,
  resetDate: user.resetDate,
};
},
});

// Reservar cr√©ditos antes de generar
export const reserveCredits = mutation({
args: {
userId: v.string(),
amount: v.number(),
projectId: v.id("projects"),
},
handler: async (ctx, { userId, amount, projectId }) => {
const user = await ctx.db
.query("users")
.filter((q) => q.eq(q.field("clerkId"), userId))
.first();


if (!user) {
  throw new Error("Usuario no encontrado");
}

if (user.credits < amount) {
  throw new Error("Cr√©ditos insuficientes");
}

// Crear reserva temporal
await ctx.db.insert("creditReservations", {
  userId: user._id,
  projectId,
  amount,
  status: 'reserved',
  createdAt: Date.now(),
});

return { success: true };
},
});

// Confirmar uso de cr√©ditos despu√©s de generaci√≥n
export const confirmCreditsUsage = mutation({
args: {
userId: v.string(),
projectId: v.id("projects"),
actualAmount: v.number(),
},
handler: async (ctx, { userId, projectId, actualAmount }) => {
const user = await ctx.db
.query("users")
.filter((q) => q.eq(q.field("clerkId"), userId))
.first();


if (!user) {
  throw new Error("Usuario no encontrado");
}

// Descontar cr√©ditos
await ctx.db.patch(user._id, {
  credits: user.credits - actualAmount,
  creditsUsedThisMonth: (user.creditsUsedThisMonth || 0) + actualAmount,
});

// Registrar transacci√≥n
await ctx.db.insert("creditTransactions", {
  userId: user._id,
  projectId,
  amount: -actualAmount,
  type: 'generation',
  description: 'Generaci√≥n de aplicaci√≥n',
  timestamp: Date.now(),
});

// Eliminar reserva
const reservation = await ctx.db
  .query("creditReservations")
  .filter((q) => 
    q.and(
      q.eq(q.field("userId"), user._id),
      q.eq(q.field("projectId"), projectId)
    )
  )
  .first();

if (reservation) {
  await ctx.db.delete(reservation._id);
}

return { 
  success: true, 
  remainingCredits: user.credits - actualAmount 
};
},
});

// Comprar cr√©ditos (integraci√≥n con Stripe)
export const purchaseCredits = mutation({
args: {
userId: v.string(),
packageId: v.string(), // 'small', 'medium', 'large', 'xlarge'
},
handler: async (ctx, { userId, packageId }) => {
const packages = {
small: { credits: 10000, price: 10 },
medium: { credits: 50000, price: 45 },
large: { credits: 150000, price: 120 },
xlarge: { credits: 500000, price: 350 },
};


const pkg = packages[packageId];
if (!pkg) {
  throw new Error("Paquete inv√°lido");
}

// Aqu√≠ se integrar√≠a con Stripe
// Por ahora, simulamos la compra exitosa

const user = await ctx.db
  .query("users")
  .filter((q) => q.eq(q.field("clerkId"), userId))
  .first();

if (!user) {
  throw new Error("Usuario no encontrado");
}

// Agregar cr√©ditos
await ctx.db.patch(user._id, {
  credits: user.credits + pkg.credits,
});

// Registrar transacci√≥n
await ctx.db.insert("creditTransactions", {
  userId: user._id,
  amount: pkg.credits,
  type: 'purchase',
  description: `Compra de ${pkg.credits.toLocaleString()} cr√©ditos`,
  price: pkg.price,
  timestamp: Date.now(),
});

return { 
  success: true, 
  newBalance: user.credits + pkg.credits 
};
},
});

// Historial de transacciones
export const getCreditHistory = query({
args: { userId: v.string() },
handler: async (ctx, { userId }) => {
const user = await ctx.db
.query("users")
.filter((q) => q.eq(q.field("clerkId"), userId))
.first();


if (!user) {
  return [];
}

const transactions = await ctx.db
  .query("creditTransactions")
  .filter((q) => q.eq(q.field("userId"), user._id))
  .order("desc")
  .take(50);

return transactions;
},
});
Componente de Compra de Cr√©ditos:
tsxfunction PurchaseCreditsDialog() {
const [selectedPackage, setSelectedPackage] = useState<string | null>(null);
const purchaseCredits = useMutation(api.credits.purchaseCredits);

const packages = [
{
id: 'small',
name: 'Starter',
credits: 10000,
price: 10,
popular: false,
description: 'Perfecto para probar',
features: ['~2 proyectos medianos', 'V√°lido por 6 meses'],
},
{
id: 'medium',
name: 'Pro',
credits: 50000,
price: 45,
popular: true,
description: 'M√°s usado',
features: ['~10 proyectos medianos', 'V√°lido por 6 meses', '10% de descuento'],
},
{
id: 'large',
name: 'Business',
credits: 150000,
price: 120,
popular: false,
description: 'Para equipos',
features: ['~30 proyectos medianos', 'V√°lido por 1 a√±o', '20% de descuento'],
},
{
id: 'xlarge',
name: 'Enterprise',
credits: 500000,
price: 350,
popular: false,
description: 'Uso intensivo',
features: ['~100 proyectos medianos', 'V√°lido por 1 a√±o', '30% de descuento', 'Soporte prioritario'],
},
];

const handlePurchase = async () => {
if (!selectedPackage) return;


try {
  // Aqu√≠ se integrar√≠a con Stripe Checkout
  const result = await purchaseCredits({
    userId: user.id,
    packageId: selectedPackage,
  });
  
  if (result.success) {
    toast.success('¬°Cr√©ditos comprados exitosamente!');
    onClose();
  }
} catch (error) {
  toast.error('Error al procesar la compra');
}
};

return (
<Dialog>
<DialogContent className="max-w-5xl bg-[#1a1f3a] border-[#4A90E2]/20">
<DialogHeader>
<DialogTitle className="text-2xl">Comprar Cr√©ditos</DialogTitle>
<DialogDescription>
Los cr√©ditos nunca expiran y puedes usarlos en cualquier momento
</DialogDescription>
</DialogHeader>


    <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mt-6">
      {packages.map((pkg) => (
        <Card
          key={pkg.id}
          className={`
            cursor-pointer transition-all relative
            ${selectedPackage === pkg.id 
              ? 'border-[#4A90E2] bg-[#4A90E2]/5' 
              : 'border-[#4A90E2]/20 hover:border-[#4A90E2]/50'}
            ${pkg.popular ? 'ring-2 ring-[#00D9FF]' : ''}
          `}
          onClick={() => setSelectedPackage(pkg.id)}
        >
          {pkg.popular && (
            <div className="absolute -top-3 left-1/2 -translate-x-1/2 px-3 py-1 bg-gradient-to-r from-[#4A90E2] to-[#9B59B6] rounded-full text-xs font-semibold">
              M√°s Popular
            </div>
          )}
          
          <CardHeader>
            <CardTitle className="text-lg">{pkg.name}</CardTitle>
            <CardDescription className="text-xs">
              {pkg.description}
            </CardDescription>
          </CardHeader>
          
          <CardContent className="space-y-4">
            <div>
              <div className="text-3xl font-bold">
                ${pkg.price}
              </div>
              <div className="text-sm text-gray-400">
                {pkg.credits.toLocaleString()} cr√©ditos
              </div>
              <div className="text-xs text-[#00D9FF] mt-1">
                ${(pkg.price / (pkg.credits / 1000)).toFixed(3)} por 1K
              </div>
            </div>
            
            <div className="space-y-2">
              {pkg.features.map((feature, idx) => (
                <div key={idx} className="flex items-start gap-2ReintentarClaude a√∫n no tiene la capacidad de ejecutar el c√≥digo que genera.JContinuartsx                    <div key={idx} className="flex items-start gap-2 text-xs">
                  <CheckCircle2 className="w-3 h-3 text-green-500 mt-0.5 flex-shrink-0" />
                  <span className="text-gray-400">{feature}</span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      ))}
    </div>

    <DialogFooter className="mt-6">
      <Button variant="outline" onClick={onClose}>
        Cancelar
      </Button>
      <Button
        disabled={!selectedPackage}
        className="bg-gradient-to-r from-[#4A90E2] to-[#9B59B6] hover:opacity-90"
        onClick={handlePurchase}
      >
        <CreditCard className="w-4 h-4 mr-2" />
        Comprar Ahora
      </Button>
    </DialogFooter>
  </DialogContent>
</Dialog>
);
}

INTEGRACI√ìN CON JOXCODER (HUGGING FACE) Servicio de Generaci√≥n: typescript// lib/services/joxcoder.ts
interface GenerationRequest {
description: string;
framework: 'react' | 'next' | 'vue' | 'vanilla';
userId: string;
projectId: string;
}

interface GenerationResponse {
files: Record<string, string>; // filepath -> content
creditsUsed: number;
generationTime: number;
}

export class JoxCoderService {
private apiUrl = process.env.HUGGINGFACE_API_URL!;
private apiKey = process.env.HUGGINGFACE_API_KEY!;

async generateApplication(request: GenerationRequest): Promise<GenerationResponse> {
const startTime = Date.now();


// Construir el prompt optimizado para JoxCoder
const prompt = this.buildPrompt(request);

// Estimar tokens de input
const inputTokens = this.estimateTokens(prompt);

try {
  // Llamada a Hugging Face Inference API
  const response = await fetch(this.apiUrl, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${this.apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      inputs: prompt,
      parameters: {
        max_new_tokens: 8000,
        temperature: 0.7,
        top_p: 0.95,
        do_sample: true,
        return_full_text: false,
      },
      options: {
        use_cache: false,
        wait_for_model: true,
      },
    }),
  });

  if (!response.ok) {
    throw new Error(`Hugging Face API error: ${response.statusText}`);
  }

  const data = await response.json();
  
  // Parsear la respuesta (JoxCoder devuelve c√≥digo estructurado)
  const files = this.parseGeneratedCode(data[0].generated_text, request.framework);
  
  // Calcular tokens usados (input + output)
  const outputTokens = this.estimateTokens(data[0].generated_text);
  const totalTokens = inputTokens + outputTokens;
  
  const generationTime = Date.now() - startTime;
  
  return {
    files,
    creditsUsed: totalTokens,
    generationTime,
  };
} catch (error) {
  console.error('JoxCoder generation error:', error);
  throw new Error('Error al generar aplicaci√≥n. Por favor intenta de nuevo.');
}
}

private buildPrompt(request: GenerationRequest): string {
const { description, framework } = request;


return `You are JoxCoder v1, an expert code generator. Generate a complete, production-ready ${framework} application based on the following description:
${description}

Requirements:

Generate ALL necessary files (HTML, CSS, JS, components, etc.)
Use modern best practices and clean code
Include responsive design (mobile-first)
Add proper comments in code
Use TailwindCSS for styling
Ensure all functionality works out of the box
Follow ${framework} conventions and patterns
Output Format:
Return the code in the following JSON structure:
{
"files": {
"path/to/file.ext": "file content here",
...
}
}

Start generating:`;
}

private parseGeneratedCode(generated: string, framework: string): Record<string, string> {
try {
// Intentar parsear como JSON
const parsed = JSON.parse(generated);
if (parsed.files) {
return parsed.files;
}
} catch (e) {
// Si no es JSON, parsear manualmente
}


// Fallback: Parsear c√≥digo con delimitadores
const files: Record<string, string> = {};
const fileRegex = /```(\w+)?\s*\n\/\/ FILE: (.+?)\n([\s\S]+?)```/g;

let match;
while ((match = fileRegex.exec(generated)) !== null) {
  const [, , filepath, content] = match;
  files[filepath.trim()] = content.trim();
}

// Si no hay archivos parseados, crear estructura b√°sica
if (Object.keys(files).length === 0) {
  files['index.html'] = this.createFallbackHTML(generated);
}

return files;
}

private estimateTokens(text: string): number {
// Aproximaci√≥n: 1 token ‚âà 4 caracteres en ingl√©s
return Math.ceil(text.length / 4);
}

private createFallbackHTML(content: string): string {
return `<!DOCTYPE html>

<html lang="es"> <head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>Generated App</title> <script src="https://cdn.tailwindcss.com"></script> </head> <body> ${content} </body> </html>`; } } Convex Action para Generaci√≥n: typescript// convex/generation.ts import { action } from "./_generated/server"; import { v } from "convex/values"; import { JoxCoderService } from "../lib/services/joxcoder";
export const generateApplication = action({
args: {
userId: v.string(),
projectId: v.id("projects"),
description: v.string(),
framework: v.optional(v.string()),
},
handler: async (ctx, args) => {
const joxcoder = new JoxCoderService();


try {
  // 1. Reservar cr√©ditos estimados
  const estimatedCredits = Math.ceil(args.description.length / 3.5) * 2.5;
  await ctx.runMutation(api.credits.reserveCredits, {
    userId: args.userId,
    amount: estimatedCredits,
    projectId: args.projectId,
  });
  
  // 2. Generar aplicaci√≥n
  const result = await joxcoder.generateApplication({
    description: args.description,
    framework: (args.framework as any) || 'react',
    userId: args.userId,
    projectId: args.projectId,
  });
  
  // 3. Guardar archivos en el proyecto
  await ctx.runMutation(api.projects.saveGeneratedFiles, {
    projectId: args.projectId,
    files: result.files,
  });
  
  // 4. Confirmar uso real de cr√©ditos
  await ctx.runMutation(api.credits.confirmCreditsUsage, {
    userId: args.userId,
    projectId: args.projectId,
    actualAmount: result.creditsUsed,
  });
  
  // 5. Actualizar estado del proyecto
  await ctx.runMutation(api.projects.updateProject, {
    projectId: args.projectId,
    status: 'complete',
    creditsUsed: result.creditsUsed,
    generationTime: result.generationTime,
  });
  
  return {
    success: true,
    creditsUsed: result.creditsUsed,
    filesGenerated: Object.keys(result.files).length,
    generationTime: result.generationTime,
  };
} catch (error) {
  console.error('Generation error:', error);
  
  // Liberar cr√©ditos reservados en caso de error
  await ctx.runMutation(api.credits.cancelReservation, {
    userId: args.userId,
    projectId: args.projectId,
  });
  
  return {
    success: false,
    error: error.message || 'Error desconocido',
  };
}
},
});

WEBCONTAINERS (EJECUCI√ìN DE C√ìDIGO) Servicio de WebContainer: typescript// lib/services/webcontainer.ts import { WebContainer } from '@webcontainer/api';
export class WebContainerService {
private container: WebContainer | null = null;
private isBooting = false;

async boot(): Promise<void> {
if (this.container) return;
if (this.isBooting) {
// Esperar a que termine de bootear
while (this.isBooting) {
await new Promise(resolve => setTimeout(resolve, 100));
}
return;
}


this.isBooting = true;

try {
  this.container = await WebContainer.boot();
  console.log('WebContainer booted successfully');
} catch (error) {
  console.error('Failed to boot WebContainer:', error);
  throw error;
} finally {
  this.isBooting = false;
}
}

async mountFiles(files: Record<string, string>): Promise<void> {
if (!this.container) {
throw new Error('WebContainer not initialized');
}


// Convertir archivos a formato WebContainer
const fileTree = this.buildFileTree(files);

await this.container.mount(fileTree);
}

async installDependencies(onOutput?: (data: string) => void): Promise<void> {
if (!this.container) {
throw new Error('WebContainer not initialized');
}


const installProcess = await this.container.spawn('npm', ['install']);

if (onOutput) {
  installProcess.output.pipeTo(
    new WritableStream({
      write(data) {
        onOutput(data);
      },
    })
  );
}

const exitCode = await installProcess.exit;

if (exitCode !== 0) {
  throw new Error(`npm install failed with exit code ${exitCode}`);
}
}

async startDevServer(onOutput?: (data: string) => void): Promise<string> {
if (!this.container) {
throw new Error('WebContainer not initialized');
}


const devProcess = await this.container.spawn('npm', ['run', 'dev']);

if (onOutput) {
  devProcess.output.pipeTo(
    new WritableStream({
      write(data) {
        onOutput(data);
      },
    })
  );
}

// Esperar a que el servidor est√© listo
await new Promise(resolve => setTimeout(resolve, 3000));

// Obtener URL del servidor
this.container.on('server-ready', (port, url) => {
  console.log('Dev server ready at:', url);
});

const url = await this.getServerUrl();
return url;
}

async runCommand(command: string, onOutput?: (data: string) => void): Promise<number> {
if (!this.container) {
throw new Error('WebContainer not initialized');
}


const [cmd, ...args] = command.split(' ');
const process = await this.container.spawn(cmd, args);

if (onOutput) {
  process.output.pipeTo(
    new WritableStream({
      write(data) {
        onOutput(data);
      },
    })
  );
}

return await process.exit;
}

async writeFile(path: string, content: string): Promise<void> {
if (!this.container) {
throw new Error('WebContainer not initialized');
}


await this.container.fs.writeFile(path, content);
}

async readFile(path: string): Promise<string> {
if (!this.container) {
throw new Error('WebContainer not initialized');
}


const content = await this.container.fs.readFile(path, 'utf-8');
return content;
}

async deleteFile(path: string): Promise<void> {
if (!this.container) {
throw new Error('WebContainer not initialized');
}


await this.container.fs.rm(path);
}

private buildFileTree(files: Record<string, string>): any {
const tree: any = {};


for (const [path, content] of Object.entries(files)) {
  const parts = path.split('/');
  let current = tree;
  
  for (let i = 0; i < parts.length - 1; i++) {
    const part = parts[i];
    if (!current[part]) {
      current[part] = { directory: {} };
    }
    current = current[part].directory;
  }
  
  const filename = parts[parts.length - 1];
  current[filename] = {
    file: {
      contents: content,
    },
  };
}

return tree;
}

private async getServerUrl(): Promise<string> {
if (!this.container) {
throw new Error('WebContainer not initialized');
}


// Obtener URL del servidor (puerto 3000 por defecto)
return new Promise((resolve) => {
  this.container!.on('server-ready', (port, url) => {
    resolve(url);
  });
});
}

destroy(): void {
if (this.container) {
this.container.teardown();
this.container = null;
}
}
}
Hook de React para WebContainer:
typescript// lib/hooks/useWebContainer.ts
import { useState, useEffect, useRef } from 'react';
import { WebContainerService } from '@/lib/services/webcontainer';

export function useWebContainer(files: Record<string, string>) {
const [isReady, setIsReady] = useState(false);
const [previewUrl, setPreviewUrl] = useState<string | null>(null);
const [terminalOutput, setTerminalOutput] = useState<string[]>([]);
const [isRunning, setIsRunning] = useState(false);

const containerRef = useRef<WebContainerService | null>(null);

useEffect(() => {
initializeContainer();


return () => {
  if (containerRef.current) {
    containerRef.current.destroy();
  }
};
}, []);

const initializeContainer = async () => {
try {
const container = new WebContainerService();
await container.boot();
containerRef.current = container;
setIsReady(true);


  // Montar archivos iniciales
  if (files && Object.keys(files).length > 0) {
    await container.mountFiles(files);
  }
} catch (error) {
  console.error('Failed to initialize WebContainer:', error);
}
};

const runProject = async () => {
if (!containerRef.current || !isReady) return;


setIsRunning(true);
setTerminalOutput([]);

try {
  // Instalar dependencias
  addTerminalOutput('Installing dependencies...');
  await containerRef.current.installDependencies((data) => {
    addTerminalOutput(data);
  });
  
  // Iniciar servidor
  addTerminalOutput('Starting dev server...');
  const url = await containerRef.current.startDevServer((data) => {
    addTerminalOutput(data);
  });
  
  setPreviewUrl(url);
  addTerminalOutput(`Server ready at ${url}`);
} catch (error) {
  addTerminalOutput(`Error: ${error.message}`);
} finally {
  setIsRunning(false);
}
};

const runCommand = async (command: string) => {
if (!containerRef.current || !isReady) return;


addTerminalOutput(`$ ${command}`);

await containerRef.current.runCommand(command, (data) => {
  addTerminalOutput(data);
});
};

const updateFile = async (path: string, content: string) => {
if (!containerRef.current || !isReady) return;


await containerRef.current.writeFile(path, content);
};

const addTerminalOutput = (output: string) => {
setTerminalOutput((prev) => [...prev, output]);
};

return {
isReady,
previewUrl,
terminalOutput,
isRunning,
runProject,
runCommand,
updateFile,
container: containerRef.current,
};
}

TERMINAL FUNCIONAL (XTERM.JS) Componente de Terminal: tsx// components/terminal/Terminal.tsx 'use client';
import { useEffect, useRef, useState } from 'react';
import { Terminal as XTerm } from 'xterm';
import { FitAddon } from 'xterm-addon-fit';
import 'xterm/css/xterm.css';

interface TerminalProps {
onCommand: (command: string) => void;
output?: string[];
className?: string;
}

export function Terminal({ onCommand, output = [], className }: TerminalProps) {
const terminalRef = useRef<HTMLDivElement>(null);
const xtermRef = useRef<XTerm | null>(null);
const fitAddonRef = useRef<FitAddon | null>(null);
const [currentInput, setCurrentInput] = useState('');
const [commandHistory, setCommandHistory] = useState<string[]>([]);
const [historyIndex, setHistoryIndex] = useState(-1);

useEffect(() => {
if (!terminalRef.current) return;


// Inicializar XTerm
const term = new XTerm({
  cursorBlink: true,
  fontSize: 14,
  fontFamily: 'Menlo, Monaco, "Courier New", monospace',
  theme: {
    background: '#0A0E27',
    foreground: '#ffffff',
    cursor: '#4A90E2',
    black: '#000000',
    red: '#EF4444',
    green: '#10B981',
    yellow: '#F59E0B',
    blue: '#4A90E2',
    magenta: '#9B59B6',
    cyan: '#00D9FF',
    white: '#ffffff',
  },
  scrollback: 1000,
});

const fitAddon = new FitAddon();
term.loadAddon(fitAddon);

term.open(terminalRef.current);
fitAddon.fit();

xtermRef.current = term;
fitAddonRef.current = fitAddon;

// Prompt inicial
writePrompt();

// Manejar entrada de usuario
term.onKey(({ key, domEvent }) => {
  const ev = domEvent;
  const printable = !ev.altKey && !ev.ctrlKey && !ev.metaKey;

  if (ev.keyCode === 13) {
    // Enter
    term.write('\r\n');
    if (currentInput.trim()) {
      executeCommand(currentInput.trim());
      setCommandHistory(prev => [...prev, currentInput]);
      setCurrentInput('');
    }
    writePrompt();
  } else if (ev.keyCode === 8) {
    // Backspace
    if (currentInput.length > 0) {
      setCurrentInput(prev => prev.slice(0, -1));
      term.write('\b \b');
    }
  } else if (ev.keyCode === 38) {
    // Arrow Up (history)
    if (commandHistory.length > 0 && historyIndex < commandHistory.length - 1) {
      const newIndex = historyIndex + 1;
      setHistoryIndex(newIndex);
      const cmd = commandHistory[commandHistory.length - 1 - newIndex];
      replaceCurrentInput(cmd);
    }
  } else if (ev.keyCode === 40) {
    // Arrow Down (history)
    if (historyIndex > 0) {
      const newIndex = historyIndex - 1;
      setHistoryIndex(newIndex);
      const cmd = commandHistory[commandHistory.length - 1 - newIndex];
      replaceCurrentInput(cmd);
    } else if (historyIndex === 0) {
      setHistoryIndex(-1);
      replaceCurrentInput('');
    }
  } else if (printable) {
    setCurrentInput(prev => prev + key);
    term.write(key);
  }
});

// Resize observer
const resizeObserver = new ResizeObserver(() => {
  fitAddon.fit();
});
resizeObserver.observe(terminalRef.current);

return () => {
  term.dispose();
  resizeObserver.disconnect();
};
}, []);

// Mostrar output externo
useEffect(() => {
if (output.length > 0 && xtermRef.current) {
const lastOutput = output[output.length - 1];
xtermRef.current.write(lastOutput + '\r\n');
}
}, [output]);

const writePrompt = () => {
if (xtermRef.current) {
xtermRef.current.write('\x1b[32m$\x1b[0m '); // Green $
}
};

const replaceCurrentInput = (newInput: string) => {
if (xtermRef.current) {
// Borrar input actual
for (let i = 0; i < currentInput.length; i++) {
xtermRef.current.write('\b \b');
}
// Escribir nuevo input
xtermRef.current.write(newInput);
setCurrentInput(newInput);
}
};

const executeCommand = (command: string) => {
onCommand(command);
setHistoryIndex(-1);
};

return (
<div
ref={terminalRef}
className={className}
style={{ height: '100%', width: '100%' }}
/>
);
}

MONACO EDITOR (EDITOR DE C√ìDIGO) Componente de Editor: tsx// components/editor/MonacoEditor.tsx 'use client';
import { useEffect, useRef } from 'react';
import Editor, { Monaco } from '@monaco-editor/react';
import * as monaco from 'monaco-editor';

interface MonacoEditorProps {
path: string;
value: string;
onChange: (value: string) => void;
language?: string;
theme?: 'vs-dark' | 'light';
options?: monaco.editor.IStandaloneEditorConstructionOptions;
}

export function MonacoEditor({
path,
value,
onChange,
language,
theme = 'vs-dark',
options = {},
}: MonacoEditorProps) {
const editorRef = useRef<monaco.editor.IStandaloneCodeEditor | null>(null);

const handleEditorDidMount = (editor: monaco.editor.IStandaloneCodeEditor, monaco: Monaco) => {
editorRef.current = editor;


// Configurar tema personalizado
monaco.editor.defineTheme('joxai-dark', {
  base: 'vs-dark',
  inherit: true,
  rules: [
    { token: 'comment', foreground: '6B7280', fontStyle: 'italic' },
    { token: 'keyword', foreground: '9B59B6', fontStyle: 'bold' },
    { token: 'string', foreground: '10B981' },
    { token: 'number', foreground: 'F59E0B' },
    { token: 'function', foreground: '4A90E2' },
    { token: 'variable', foreground: '00D9FF' },
  ],
  colors: {
    'editor.background': '#0A0E27',
    'editor.foreground': '#ffffff',
    'editor.lineHighlightBackground': '#1a1f3a',
    'editor.selectionBackground': '#4A90E230',
    'editorCursor.foreground': '#4A90E2',
    'editorLineNumber.foreground': '#6B7280',
    'editorLineNumber.activeForeground': '#4A90E2',
  },
});

monaco.editor.setTheme('joxai-dark');

// Atajos de teclado personalizados
editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyS, () => {
  // Guardar archivo (trigger onChange)
  onChange(editor.getValue());
});
};

const defaultOptions: monaco.editor.IStandaloneEditorConstructionOptions = {
fontSize: 14,
minimap: { enabled: true },
lineNumbers: 'on',
roundedSelection: false,
scrollBeyondLastLine: false,
automaticLayout: true,
tabSize: 2,
wordWrap: 'on',
formatOnPaste: true,
formatOnType: true,
suggest: {
showKeywords: true,
showSnippets: true,
},
quickSuggestions: {
other: true,
comments: false,
strings: true,
},
...options,
};

return (
<Editor
path={path}
language={language || getLanguageFromPath(path)}
value={value}
onChange={(value) => onChange(value || '')}
theme={theme}
options={defaultOptions}
onMount={handleEditorDidMount}
/>
);
}

function getLanguageFromPath(path: string): string {
const ext = path.split('.').pop()?.toLowerCase();

const languageMap: Record<string, string> = {
js: 'javascript',
jsx: 'javascript',
ts: 'typescript',
tsx: 'typescript',
html: 'html',
css: 'css',
scss: 'scss',
json: 'json',
md: 'markdown',
py: 'python',
go: 'go',
rs: 'rust',
java: 'java',
cpp: 'cpp',
c: 'c',
sh: 'shell',
};

return languageMap[ext || ''] || 'plaintext';
}

FILE TREE COMPONENT tsx// components/editor/FileTree.tsx 'use client';
import { useState } from 'react';
import {
ChevronRight,
ChevronDown,
File,
Folder,
FolderOpen,
FileCode,
FileJson,
FileText,
Image as ImageIcon,
} from 'lucide-react';

interface FileNode {
name: string;
path: string;
type: 'file' | 'folder';
children?: FileNode[];
}

interface FileTreeProps {
files: Record<string, string>;
activeFile: string | null;
onFileClick: (path: string) => void;
}

export function FileTree({ files, activeFile, onFileClick }: FileTreeProps) {
const [expandedFolders, setExpandedFolders] = useState<Set<string>>(new Set(['/']));

// Construir √°rbol de archivos
const fileTree = buildFileTree(files);

const toggleFolder = (path: string) => {
setExpandedFolders(prev => {
const next = new Set(prev);
if (next.has(path)) {
next.delete(path);
} else {
next.add(path);
}
return next;
});
};

const renderNode = (node: FileNode, depth: number = 0) => {
const isExpanded = expandedFolders.has(node.path);
const isActive = activeFile === node.path;


if (node.type === 'folder') {
  return (
    <div key={node.path}>
      <div
        className={`
          flex items-center gap-2 px-2 py-1.5 cursor-pointer hover:bg-[#4A90E2]/10 rounded
          ${isActive ? 'bg-[#4A90E2]/20' : ''}
        `}
        style={{ paddingLeft: `${depth * 12 + 8}px` }}
        onClick={() => toggleFolder(node.path)}
      >
        {isExpanded ? (
          <ChevronDown className="w-4 h-4" />
        ) : (
          <ChevronRight className="w-4 h-4" />
        )}
        {isExpanded ? (
          <FolderOpen className="w-4 h-4 text-[#F59E0B]" />
        ) : (
          <Folder className="w-4 h-4 text-[#F59E0B]" />
        )}
        <span className="text-sm">{node.name}</span>
      </div>
      {isExpanded && node.children && (
        <div>
          {node.children.map(child => renderNode(child, depth + 1))}
        </div>
      )}
    </div>
  );
}

return (
  <div
    key={node.path}
    className={`
      flex items-center gap-2 px-2 py-1.5 cursor-pointer hover:bg-[#4A90E2]/10 rounded
      ${isActive ? 'bg-[#4A90E2]/20 border-l-2 border-[#4A90E2]' : ''}
    `}
    style={{ paddingLeft: `${depth * 12 + 24}px` }}
    onClick={() => onFileClick(node.path)}
  >
    {getFileIcon(node.name)}
    <span className="text-sm">{node.name}</span>
  </div>
);
};

return (
<div className="text-white">
{fileTree.children?.map(node => renderNode(node))}
</div>
);
}

function buildFileTree(files: Record<string, string>): FileNode {
const root: FileNode = {
name: '/',
path: '/',
type: 'folder',
children: [],
};

for (const path of Object.keys(files)) {
const parts = path.split('/').filter(Boolean);
let current = root;


for (let i = 0; i < parts.length; i++) {
  const part = parts[i];
  const isLast = i === parts.length - 1;
  const fullPath = '/' + parts.slice(0, i + 1).join('/');

  let existing = current.children?.find(c => c.name === part);

  if (!ReintentarClaude a√∫n no tiene la capacidad de ejecutar el c√≥digo que genera.JContinuartypescript      if (!existing) {
    existing = {
      name: part,
      path: fullPath,
      type: isLast ? 'file' : 'folder',
      children: isLast ? undefined : [],
    };
    current.children = current.children || [];
    current.children.push(existing);
  }

  current = existing;
}
}

// Ordenar: carpetas primero, luego archivos alfab√©ticamente
const sortNodes = (nodes: FileNode[]): FileNode[] => {
return nodes.sort((a, b) => {
if (a.type === b.type) {
return a.name.localeCompare(b.name);
}
return a.type === 'folder' ? -1 : 1;
});
};

const sortRecursive = (node: FileNode) => {
if (node.children) {
node.children = sortNodes(node.children);
node.children.forEach(sortRecursive);
}
};

sortRecursive(root);

return root;
}

function getFileIcon(filename: string) {
const ext = filename.split('.').pop()?.toLowerCase();

const iconMap: Record<string, JSX.Element> = {
js: <FileCode className="w-4 h-4 text-[#F59E0B]" />,
jsx: <FileCode className="w-4 h-4 text-[#00D9FF]" />,
ts: <FileCode className="w-4 h-4 text-[#4A90E2]" />,
tsx: <FileCode className="w-4 h-4 text-[#4A90E2]" />,
html: <FileCode className="w-4 h-4 text-[#EF4444]" />,
css: <FileCode className="w-4 h-4 text-[#9B59B6]" />,
json: <FileJson className="w-4 h-4 text-[#F59E0B]" />,
md: <FileText className="w-4 h-4 text-[#10B981]" />,
png: <ImageIcon className="w-4 h-4 text-[#9B59B6]" />,
jpg: <ImageIcon className="w-4 h-4 text-[#9B59B6]" />,
svg: <ImageIcon className="w-4 h-4 text-[#00D9FF]" />,
};

return iconMap[ext || ''] || <File className="w-4 h-4 text-gray-400" />;
}

INTEGRACI√ìN CON GITHUB Servicio de GitHub: typescript// lib/services/github.ts
interface GitHubRepo {
name: string;
private: boolean;
description?: string;
}

export class GitHubService {
private async getAccessToken(userId: string): Promise<string> {
// Obtener token de GitHub del usuario (guardado en Convex)
// Esto requiere OAuth flow previo
const user = await fetch(/api/users/${userId}/github-token);
const data = await user.json();
return data.accessToken;
}

async createRepository(
userId: string,
repoName: string,
isPrivate: boolean = true
): Promise<GitHubRepo> {
const token = await this.getAccessToken(userId);


const response = await fetch('https://api.github.com/user/repos', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json',
    'Accept': 'application/vnd.github.v3+json',
  },
  body: JSON.stringify({
    name: repoName,
    private: isPrivate,
    auto_init: true,
    description: 'Created with AUTOCREA by JoxAI',
  }),
});

if (!response.ok) {
  throw new Error('Failed to create GitHub repository');
}

return await response.json();
}

async pushFiles(
userId: string,
repoName: string,
files: Record<string, string>,
commitMessage: string = 'Initial commit from AUTOCREA'
): Promise<void> {
const token = await this.getAccessToken(userId);
const username = await this.getUsername(token);


// Obtener SHA del √∫ltimo commit
const refResponse = await fetch(
  `https://api.github.com/repos/${username}/${repoName}/git/refs/heads/main`,
  {
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/vnd.github.v3+json',
    },
  }
);

const refData = await refResponse.json();
const lastCommitSha = refData.object.sha;

// Crear blobs para cada archivo
const blobs: Array<{ path: string; sha: string }> = [];

for (const [path, content] of Object.entries(files)) {
  const blobResponse = await fetch(
    `https://api.github.com/repos/${username}/${repoName}/git/blobs`,
    {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
        'Accept': 'application/vnd.github.v3+json',
      },
      body: JSON.stringify({
        content: content,
        encoding: 'utf-8',
      }),
    }
  );

  const blobData = await blobResponse.json();
  blobs.push({ path, sha: blobData.sha });
}

// Crear tree
const treeResponse = await fetch(
  `https://api.github.com/repos/${username}/${repoName}/git/trees`,
  {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/vnd.github.v3+json',
    },
    body: JSON.stringify({
      base_tree: lastCommitSha,
      tree: blobs.map(blob => ({
        path: blob.path,
        mode: '100644',
        type: 'blob',
        sha: blob.sha,
      })),
    }),
  }
);

const treeData = await treeResponse.json();

// Crear commit
const commitResponse = await fetch(
  `https://api.github.com/repos/${username}/${repoName}/git/commits`,
  {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/vnd.github.v3+json',
    },
    body: JSON.stringify({
      message: commitMessage,
      tree: treeData.sha,
      parents: [lastCommitSha],
    }),
  }
);

const commitData = await commitResponse.json();

// Actualizar referencia
await fetch(
  `https://api.github.com/repos/${username}/${repoName}/git/refs/heads/main`,
  {
    method: 'PATCH',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/vnd.github.v3+json',
    },
    body: JSON.stringify({
      sha: commitData.sha,
    }),
  }
);
}

private async getUsername(token: string): Promise<string> {
const response = await fetch('https://api.github.com/user', {
headers: {
'Authorization': Bearer ${token},
'Accept': 'application/vnd.github.v3+json',
},
});


const data = await response.json();
return data.login;
}
}
Di√°logo de Push a GitHub:
tsxfunction PushToGitHubDialog({ projectId, files }: { projectId: string; files: Record<string, string> }) {
const [repoName, setRepoName] = useState('');
const [isPrivate, setIsPrivate] = useState(true);
const [isConnected, setIsConnected] = useState(false);
const [isPushing, setIsPushing] = useState(false);

const handleConnect = async () => {
// Iniciar OAuth flow de GitHub
window.location.href = /api/auth/github?redirect=${window.location.pathname};
};

const handlePush = async () => {
setIsPushing(true);


try {
  const github = new GitHubService();
  
  // Crear repositorio
  await github.createRepository(user.id, repoName, isPrivate);
  
  // Push de archivos
  await github.pushFiles(user.id, repoName, files);
  
  toast.success('¬°C√≥digo subido a GitHub exitosamente!');
  onClose();
} catch (error) {
  toast.error('Error al subir a GitHub');
} finally {
  setIsPushing(false);
}
};

return (
<Dialog>
<DialogContent className="bg-[#1a1f3a] border-[#4A90E2]/20">
<DialogHeader>
<DialogTitle className="flex items-center gap-2">
<Github className="w-5 h-5" />
Push a GitHub
</DialogTitle>
</DialogHeader>


    {!isConnected ? (
      <div className="text-center py-8">
        <Github className="w-16 h-16 mx-auto mb-4 text-gray-500" />
        <h3 className="text-lg font-semibold mb-2">
          Conecta tu cuenta de GitHub
        </h3>
        <p className="text-gray-400 mb-6">
          Necesitamos permisos para crear repositorios en tu cuenta
        </p>
        <Button 
          onClick={handleConnect}
          className="bg-[#333] hover:bg-[#444]"
        >
          <Github className="w-4 h-4 mr-2" />
          Conectar con GitHub
        </Button>
      </div>
    ) : (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-2">
            Nombre del repositorio
          </label>
          <Input
            value={repoName}
            onChange={(e) => setRepoName(e.target.value)}
            placeholder="mi-proyecto-autocrea"
            className="bg-[#0A0E27] border-[#4A90E2]/20"
          />
        </div>

        <div className="flex items-center justify-between">
          <div>
            <label className="text-sm font-medium">Repositorio privado</label>
            <p className="text-xs text-gray-400">
              Solo t√∫ podr√°s ver este repositorio
            </p>
          </div>
          <Switch
            checked={isPrivate}
            onCheckedChange={setIsPrivate}
          />
        </div>

        <Alert className="bg-[#4A90E2]/10 border-[#4A90E2]/30">
          <Info className="w-4 h-4" />
          <AlertDescription className="text-sm">
            Se crear√°n {Object.keys(files).length} archivos en el repositorio
          </AlertDescription>
        </Alert>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Cancelar
          </Button>
          <Button
            onClick={handlePush}
            disabled={!repoName || isPushing}
            className="bg-gradient-to-r from-[#4A90E2] to-[#9B59B6]"
          >
            {isPushing ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                Subiendo...
              </>
            ) : (
              <>
                <Upload className="w-4 h-4 mr-2" />
                Subir a GitHub
              </>
            )}
          </Button>
        </DialogFooter>
      </div>
    )}
  </DialogContent>
</Dialog>
);
}

DEPLOY A NETLIFY Servicio de Deploy: typescript// lib/services/netlify-deploy.ts
export class NetlifyDeployService {
private apiToken = process.env.NETLIFY_API_TOKEN!;

async deployProject(
projectName: string,
files: Record<string, string>
): Promise<{ url: string; deployId: string }> {
try {
// 1. Crear site en Netlify
const site = await this.createSite(projectName);


  // 2. Crear deploy
  const deploy = await this.createDeploy(site.id);
  
  // 3. Subir archivos
  await this.uploadFiles(deploy.id, files);
  
  // 4. Finalizar deploy
  const finalDeploy = await this.finalizeDeploy(deploy.id);
  
  return {
    url: finalDeploy.url,
    deployId: deploy.id,
  };
} catch (error) {
  console.error('Netlify deploy error:', error);
  throw new Error('Error al hacer deploy en Netlify');
}
}

private async createSite(name: string): Promise<any> {
const response = await fetch('https://api.netlify.com/api/v1/sites', {
method: 'POST',
headers: {
'Authorization': Bearer ${this.apiToken},
'Content-Type': 'application/json',
},
body: JSON.stringify({
name: name.toLowerCase().replace(/[^a-z0-9-]/g, '-'),
}),
});


if (!response.ok) {
  throw new Error('Failed to create Netlify site');
}

return await response.json();
}

private async createDeploy(siteId: string): Promise<any> {
const response = await fetch(
https://api.netlify.com/api/v1/sites/${siteId}/deploys,
{
method: 'POST',
headers: {
'Authorization': Bearer ${this.apiToken},
'Content-Type': 'application/json',
},
body: JSON.stringify({}),
}
);


if (!response.ok) {
  throw new Error('Failed to create deploy');
}

return await response.json();
}

private async uploadFiles(
deployId: string,
files: Record<string, string>
): Promise<void> {
// Subir archivos en paralelo
const uploads = Object.entries(files).map(([path, content]) =>
this.uploadFile(deployId, path, content)
);


await Promise.all(uploads);
}

private async uploadFile(
deployId: string,
path: string,
content: string
): Promise<void> {
const response = await fetch(
https://api.netlify.com/api/v1/deploys/${deployId}/files/${encodeURIComponent(path)},
{
method: 'PUT',
headers: {
'Authorization': Bearer ${this.apiToken},
'Content-Type': 'application/octet-stream',
},
body: content,
}
);


if (!response.ok) {
  throw new Error(`Failed to upload file: ${path}`);
}
}

private async finalizeDeploy(deployId: string): Promise<any> {
const response = await fetch(
https://api.netlify.com/api/v1/deploys/${deployId}/restore,
{
method: 'POST',
headers: {
'Authorization': Bearer ${this.apiToken},
},
}
);


if (!response.ok) {
  throw new Error('Failed to finalize deploy');
}

return await response.json();
}
}
Bot√≥n de Deploy:
tsxfunction DeployButton({ projectId, projectName, files }: any) {
const [isDeploying, setIsDeploying] = useState(false);
const [deployUrl, setDeployUrl] = useState<string | null>(null);

const handleDeploy = async () => {
setIsDeploying(true);


try {
  const netlify = new NetlifyDeployService();
  const result = await netlify.deployProject(projectName, files);
  
  setDeployUrl(result.url);
  
  // Guardar URL en Convex
  await updateProject({
    projectId,
    deployUrl: result.url,
    lastDeployAt: Date.now(),
  });
  
  toast.success('¬°Aplicaci√≥n desplegada exitosamente!');
} catch (error) {
  toast.error('Error al desplegar aplicaci√≥n');
} finally {
  setIsDeploying(false);
}
};

return (
<>
<Button
onClick={handleDeploy}
disabled={isDeploying}
className="bg-gradient-to-r from-[#4A90E2] to-[#9B59B6]"
>
{isDeploying ? (
<>
<Loader2 className="w-4 h-4 mr-2 animate-spin" />
Desplegando...
</>
) : (
<>
<Rocket className="w-4 h-4 mr-2" />
Deploy
</>
)}
</Button>


  {deployUrl && (
    <Alert className="mt-4 bg-green-500/10 border-green-500/30">
      <CheckCircle2 className="w-4 h-4 text-green-500" />
      <AlertTitle className="text-green-500">
        ¬°Deploy exitoso!
      </AlertTitle>
      <AlertDescription>
        <div className="flex items-center gap-2 mt-2">
          
            href={deployUrl}
            target="_blank"
            rel="noopener noreferrer"
            className="text-[#00D9FF] hover:underline flex items-center gap-1"
          >
            {deployUrl}
            <ExternalLink className="w-3 h-3" />
          </a>
        </div>
      </AlertDescription>
    </Alert>
  )}
</>
);
}

CONVEX SCHEMA COMPLETO typescript// convex/schema.ts import { defineSchema, defineTable } from "convex/server"; import { v } from "convex/values";
export default defineSchema({
// Usuarios
users: defineTable({
clerkId: v.string(),
email: v.string(),
name: v.optional(v.string()),
avatar: v.optional(v.string()),
plan: v.string(), // 'free', 'creator', 'pro', 'business', 'enterprise'
credits: v.number(),
creditsUsedThisMonth: v.number(),
resetDate: v.optional(v.number()),
stripeCustomerId: v.optional(v.string()),
githubConnected: v.optional(v.boolean()),
githubToken: v.optional(v.string()),
createdAt: v.number(),
}).index("by_clerk_id", ["clerkId"]),

// Proyectos
projects: defineTable({
userId: v.id("users"),
name: v.string(),
description: v.string(),
framework: v.string(), // 'react', 'next', 'vue', 'vanilla'
status: v.string(), // 'generating', 'complete', 'error'
files: v.optional(v.any()), // Record<string, string>
thumbnail: v.optional(v.string()),
creditsUsed: v.number(),
generationTime: v.optional(v.number()),
deployUrl: v.optional(v.string()),
lastDeployAt: v.optional(v.number()),
githubRepo: v.optional(v.string()),
createdAt: v.number(),
updatedAt: v.number(),
}).index("by_user", ["userId"]),

// Transacciones de cr√©ditos
creditTransactions: defineTable({
userId: v.id("users"),
projectId: v.optional(v.id("projects")),
amount: v.number(), // Negativo para consumo, positivo para compra
type: v.string(), // 'generation', 'purchase', 'refund', 'bonus'
description: v.string(),
price: v.optional(v.number()), // Para compras
timestamp: v.number(),
}).index("by_user", ["userId"]),

// Reservas de cr√©ditos (temporal durante generaci√≥n)
creditReservations: defineTable({
userId: v.id("users"),
projectId: v.id("projects"),
amount: v.number(),
status: v.string(), // 'reserved', 'confirmed', 'cancelled'
createdAt: v.number(),
}).index("by_user_project", ["userId", "projectId"]),

// Templates
templates: defineTable({
name: v.string(),
description: v.string(),
category: v.string(),
framework: v.string(),
thumbnail: v.string(),
files: v.any(), // Record<string, string>
estimatedCredits: v.number(),
features: v.array(v.string()),
popular: v.boolean(),
createdAt: v.number(),
}),
});

SETTINGS & BILLING PAGES P√°gina de Billing: tsx// app/settings/billing/page.tsx export default function BillingPage() { const { user } = useUser(); const credits = useQuery(api.credits.getUserCredits, { userId: user?.id }); const transactions = useQuery(api.credits.getCreditHistory, { userId: user?.id });
return (
<div className="container mx-auto px-6 py-8">
<h1 className="text-3xl font-bold mb-8">Facturaci√≥n y Cr√©ditos</h1>


  <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
    {/* Cr√©ditos Disponibles */}
    <Card className="bg-gradient-to-br from-[#1a1f3a] to-[#0A0E27] border-[#4A90E2]/20">
      <CardHeader>
        <CardTitle className="text-sm text-gray-400">
          Cr√©ditos Disponibles
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="text-4xl font-bold mb-2">
          {credits?.credits.toLocaleString()}
        </div>
        <p className="text-sm text-gray-400">
          {credits?.creditsUsedThisMonth.toLocaleString()} usados este mes
        </p>
        <Button 
          className="w-full mt-4 bg-gradient-to-r from-[#4A90E2] to-[#9B59B6]"
          onClick={() => setShowPurchaseDialog(true)}
        >
          <Plus className="w-4 h-4 mr-2" />
          Comprar Cr√©ditos
        </Button>
      </CardContent>
    </Card>

    {/* Plan Actual */}
    <Card className="bg-gradient-to-br from-[#1a1f3a] to-[#0A0E27] border-[#4A90E2]/20">
      <CardHeader>
        <CardTitle className="text-sm text-gray-400">
          Plan Actual
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="text-3xl font-bold mb-2 capitalize">
          {credits?.plan}
        </div>
        <p className="text-sm text-gray-400 mb-4">
          {getPlanDescription(credits?.plan)}
        </p>
        <Button variant="outline" className="w-full">
          Cambiar Plan
        </Button>
      </CardContent>
    </Card>

    {/* Pr√≥xima Renovaci√≥n */}
    <Card className="bg-gradient-to-br from-[#1a1f3a] to-[#0A0E27] border-[#4A90E2]/20">
      <CardHeader>
        <CardTitle className="text-sm text-gray-400">
          Pr√≥xima Renovaci√≥n
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="text-3xl font-bold mb-2">
          {credits?.resetDate 
            ? format(new Date(credits.resetDate), 'dd MMM')
            : 'N/A'}
        </div>
        <p className="text-sm text-gray-400 mb-4">
          Los cr√©ditos se resetean mensualmente
        </p>
        <Button variant="outline" className="w-full">
          <CreditCard className="w-4 h-4 mr-2" />
          Gestionar en Stripe
        </Button>
      </CardContent>
    </Card>
  </div>

  {/* Historial de Transacciones */}
  <Card className="bg-[#1a1f3a] border-[#4A90E2]/20">
    <CardHeader>
      <CardTitle>Historial de Transacciones</CardTitle>
    </CardHeader>
    <CardContent>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Fecha</TableHead>
            <TableHead>Descripci√≥n</TableHead>
            <TableHead>Tipo</TableHead>
            <TableHead className="text-right">Cr√©ditos</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {transactions?.map((tx) => (
            <TableRow key={tx._id}>
              <TableCell>
                {format(new Date(tx.timestamp), 'dd MMM yyyy, HH:mm')}
              </TableCell>
              <TableCell>{tx.description}</TableCell>
              <TableCell>
                <Badge variant={tx.type === 'purchase' ? 'default' : 'secondary'}>
                  {tx.type}
                </Badge>
              </TableCell>
              <TableCell className={`text-right font-mono ${tx.amount > 0 ? 'text-green-500' : 'text-red-500'}`}>
                {tx.amount > 0 ? '+' : ''}{tx.amount.toLocaleString()}
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </CardContent>
  </Card>
</div>
);
}

GU√çAS Y DOCUMENTACI√ìN P√°gina de Docs: tsx// app/docs/page.tsx export default function DocsPage() { const sections = [ { title: 'Primeros Pasos', items: [ { title: 'Introducci√≥n a AUTOCREA', href: '/docs/intro' }, { title: 'C√≥mo escribir buenos prompts', href: '/docs/prompts' }, { title: 'Tu primer proyecto', href: '/docs/first-project' }, ], }, { title: 'Gu√≠a de Usuario', items: [ { title: 'Generaci√≥n de aplicaciones', href: '/docs/generation' }, { title: 'Editor de c√≥digo', href: '/docs/editor' }, { title: 'Terminal y comandos', href: '/docs/terminal' }, { title: 'Deploy a producci√≥n', href: '/docs/deploy' }, { title: 'Integraci√≥n con GitHub', href: '/docs/github' }, ], }, { title: 'Cr√©ditos y Planes', items: [ { title: 'C√≥mo funcionan los cr√©ditos', href: '/docs/credits' }, { title: 'Planes de suscripci√≥n', href: '/docs/plans' }, { title: 'Facturaci√≥n', href: '/docs/billing' }, ], }, { title: 'Referencia T√©cnica', items: [ { title: 'JoxCoder API', href: '/docs/api' }, { title: 'Frameworks soportados', href: '/docs/frameworks' }, { title: 'L√≠mites y restricciones', href: '/docs/limits' }, ], }, ];
return (
<div className="min-h-screen bg-[#0A0E27]">
<header className="border-b border-[#4A90E2]/20 bg-[#1a1f3a]/50 backdrop-blur-xl">
<div className="container mx-auto px-6 py-4">
<Link href="/dashboard" className="flex items-center gap-2 hover:opacity-80">
<ArrowLeft className="w-5 h-5" />
<span>Volver al Dashboard</span>
</Link>
</div>
</header>


  <div className="container mx-auto px-6 py-12">
    <div className="max-w-4xl mx-auto">
      <h1 className="text-5xl font-bold mb-4">Documentaci√≥n</h1>
      <p className="text-xl text-gray-400 mb-12">
        Todo lo que necesitas saber para usar AUTOCREA
      </p>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {sections.map((section) => (
          <Card key={section.title} className="bg-[#1a1f3a] border-[#4A90E2]/20">
            <CardHeader>
              <CardTitle>{section.title}</CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-3">
                {section.items.map((item) => (
                  <li key={item.href}>
                    <Link
                      href={item.href}
                      className="flex items-center gap-2 text-gray-400 hover:text-[#00D9FF] transition-colors"
                    >
                      <ChevronRight className="w-4 h-4" />
                      {item.title}
                    </Link>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  </div>
</div>
);
}

CONSIDERACIONES FINALES Variables de Entorno (.env.local): bash# Clerk NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_... CLERK_SECRET_KEY=sk_test_...
# Convex
NEXT_PUBLIC_CONVEX_URL=https://...
CONVEX_DEPLOY_KEY=...

# Stripe (ya configurado en Bolt)
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_...
STRIPE_SECRET_KEY=sk_test_Re‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢ude a√∫n no tiene la capacidad de ejecutar el c√≥digo que genera.JContinuarbash# Stripe (ya configurado en Bolt)
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_...
STRIPE_SECRET_KEY=sk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...

# Hugging Face
HUGGINGFACE_API_URL=https://api-inference.huggingface.co/models/joxai/joxcoder-v1
HUGGINGFACE_API_KEY=hf_...

# Netlify (para deploy)
NETLIFY_API_TOKEN=...

# GitHub OAuth (opcional)
GITHUB_CLIENT_ID=...
GITHUB_CLIENT_SECRET=...

# App URL
NEXT_PUBLIC_URL=http://localhost:3000

FEATURES ADICIONALES IMPORTANTES A. Rate Limiting (Prevenci√≥n de Abuso): typescript// lib/rate-limit.ts import { Ratelimit } from "@upstash/ratelimit"; import { Redis } from "@upstash/redis";
const redis = new Redis({
url: process.env.UPSTASH_REDIS_REST_URL!,
token: process.env.UPSTASH_REDIS_REST_TOKEN!,
});

// L√≠mite: 10 generaciones por hora
const ratelimit = new Ratelimit({
redis: redis,
limiter: Ratelimit.slidingWindow(10, "1 h"),
analytics: true,
});

export async function checkRateLimit(userId: string): Promise<boolean> {
const { success, limit, remaining, reset } = await ratelimit.limit(
generate:${userId}
);

if (!success) {
throw new Error(
Rate limit excedido. Podr√°s generar de nuevo en ${Math.ceil((reset - Date.now()) / 1000 / 60)} minutos.
);
}

return true;
}
B. Analytics de Uso:
typescript// lib/analytics.ts
import posthog from 'posthog-js';

export function trackEvent(event: string, properties?: Record<string, any>) {
if (typeof window !== 'undefined') {
posthog.capture(event, properties);
}
}

// Uso en componentes:
trackEvent('project_created', {
framework: 'react',
creditsUsed: 5234,
});

trackEvent('deployment_success', {
projectId: '...',
deployTime: 45000,
});
C. Error Boundaries:
tsx// components/ErrorBoundary.tsx
'use client';

import { Component, ReactNode } from 'react';
import { AlertTriangle } from 'lucide-react';
import { Button } from '@/components/ui/button';

interface Props {
children: ReactNode;
}

interface State {
hasError: boolean;
error?: Error;
}

export class ErrorBoundary extends Component<Props, State> {
constructor(props: Props) {
super(props);
this.state = { hasError: false };
}

static getDerivedStateFromError(error: Error): State {
return { hasError: true, error };
}

componentDidCatch(error: Error, errorInfo: any) {
console.error('ErrorBoundary caught:', error, errorInfo);
// Enviar a Sentry u otro servicio
}

render() {
if (this.state.hasError) {
return (
<div className="min-h-screen bg-[#0A0E27] flex items-center justify-center p-6">
<div className="max-w-md text-center">
<div className="w-20 h-20 mx-auto mb-6 rounded-full bg-red-500/10 flex items-center justify-center">
<AlertTriangle className="w-10 h-10 text-red-500" />
</div>
<h1 className="text-2xl font-bold mb-2">Algo sali√≥ mal</h1>
<p className="text-gray-400 mb-6">
{this.state.error?.message || 'Error inesperado'}
</p>
<div className="flex gap-3 justify-center">
<Button
onClick={() => window.location.href = '/dashboard'}
variant="outline"
>
Ir al Dashboard
</Button>
<Button
onClick={() => window.location.reload()}
className="bg-gradient-to-r from-[#4A90E2] to-[#9B59B6]"
>
Reintentar
</Button>
</div>
</div>
</div>
);
}


return this.props.children;
}
}
D. Loading States Globales:
tsx// components/LoadingScreen.tsx
export function LoadingScreen({ message = 'Cargando...' }: { message?: string }) {
return (
<div className="fixed inset-0 bg-[#0A0E27]/90 backdrop-blur-sm flex items-center justify-center z-50">
<div className="text-center">
<div className="w-20 h-20 mx-auto mb-4 rounded-full bg-gradient-to-r from-[#4A90E2] to-[#9B59B6] flex items-center justify-center animate-pulse">
<Sparkles className="w-10 h-10 text-white animate-spin" />
</div>
<p className="text-gray-400">{message}</p>
</div>
</div>
);
}
E. Toast Notifications (Sonner):
tsx// Ya configurado en layout
import { Toaster } from 'sonner';

// Uso:
import { toast } from 'sonner';

toast.success('¬°Proyecto creado!');
toast.error('Error al generar aplicaci√≥n');
toast.loading('Generando...');
toast.info('Tip: Puedes editar el c√≥digo manualmente');

GU√çAS COMPLETAS GU√çA DE USUARIO (MARKDOWN): markdown# Gu√≠a de Usuario - AUTOCREA
## üìö Tabla de Contenidos
[Introducci√≥n](#introducci√≥n)
[Primeros Pasos](#primeros-pasos)
[Crear tu Primera Aplicaci√≥n](#crear-tu-primera-aplicaci√≥n)
[Usar el Editor](#usar-el-editor)
[Terminal y Comandos](#terminal-y-comandos)
[Deploy a Producci√≥n](#deploy-a-producci√≥n)
[Gesti√≥n de Cr√©ditos](#gesti√≥n-de-cr√©ditos)
[Preguntas Frecuentes](#preguntas-frecuentes)
--- ## Introducci√≥n
AUTOCREA es una plataforma que transforma tus ideas en aplicaciones web funcionales usando inteligencia artificial. Solo necesitas describir lo que quieres crear y JoxCoder (nuestro modelo de IA) generar√° el c√≥digo completo.

### ¬øQu√© puedes crear?
‚úÖ Landing pages
‚úÖ Tiendas e-commerce
‚úÖ Dashboards anal√≠ticos
‚úÖ Aplicaciones SaaS
‚úÖ Portfolios
‚úÖ Blogs
‚úÖ Y mucho m√°s...
--- ## Primeros Pasos ### 1. Crear una Cuenta
Visita [autocrea.joxai.org](https://autocrea.joxai.org)
Haz clic en "Comenzar Gratis"
Registrate con Google, GitHub o email
Recibir√°s 100 tokens gratis para probar
### 2. Entender los Cr√©ditos
Los cr√©ditos son tokens que se consumen al generar c√≥digo:

1 token ‚âà 0.75 palabras procesadas por JoxCoder
Una app peque√±a: ~3,000-5,000 tokens
Una app mediana: ~8,000-15,000 tokens
Una app grande: ~20,000-40,000 tokens
Planes disponibles:

Free: 100 tokens (1 app peque√±a)
Creator ($29/mes): 10,000 tokens
Pro ($79/mes): 30,000 tokens
Business ($199/mes): 100,000 tokens
--- ## Crear tu Primera Aplicaci√≥n ### Paso 1: Describir tu Idea
Haz clic en "Nuevo Proyecto" y describe tu aplicaci√≥n:

Ejemplo de buen prompt:


Quiero crear una landing page para mi estudio de yoga "Zen Flow" con:

1. Hero Section:
   - Imagen de fondo: persona haciendo yoga al atardecer
   - T√≠tulo: "Encuentra tu equilibrio interior"
   - Subt√≠tulo: "Clases de yoga para todos los niveles"
   - Bot√≥n CTA: "Reserva tu clase gratis"

2. Servicios:
   - Cards con 4 tipos de yoga (Hatha, Vinyasa, Kundalini, Yin)
   - Cada card: √≠cono, t√≠tulo, descripci√≥n breve, duraci√≥n
   
3. Horarios:
   - Tabla con d√≠as de la semana y horarios
   - Diferentes clases cada d√≠a
   
4. Instructores:
   - Grid de 3 instructores con foto, nombre, especialidad
   
5. Testimonios:
   - Slider con 5 testimonios de alumnos
   - Foto, nombre, quote
   
6. Formulario de Contacto:
   - Nombre, Email, Tel√©fono, Mensaje
   - Bot√≥n "Enviar"
   
7. Footer:
   - Logo, direcci√≥n, tel√©fono, email
   - Redes sociales (Instagram, Facebook)
   
Estilo: Minimalista, colores tierra (verde oliva, beige, marr√≥n claro).
Fuentes: Suave y elegante.
Responsive: S√≠, mobile-first.
### Paso 2: Generar
Revisa la estimaci√≥n de cr√©ditos
Haz clic en "Generar Aplicaci√≥n"
Espera 30-120 segundos mientras JoxCoder trabaja
¬°Listo! Ver√°s tu c√≥digo generado
### Paso 3: Editar (Opcional)
Si quieres hacer cambios:

Edita el c√≥digo directamente en el editor
O usa el chat de IA para pedir modificaciones:
"Cambia el color del bot√≥n a azul"
"Agrega una secci√≥n de precios"
"Haz el texto m√°s grande en m√≥vil"
### Paso 4: Deploy
Haz clic en "Deploy"
Selecciona Netlify
Copia la URL generada
¬°Tu app est√° en l√≠nea!
--- ## Usar el Editor ### Layout del IDE

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  File Tree ‚îÇ   Code Editor    ‚îÇ   Preview    ‚îÇ
‚îÇ            ‚îÇ                  ‚îÇ              ‚îÇ
‚îÇ  src/      ‚îÇ  import React... ‚îÇ  [Live View] ‚îÇ
‚îÇ  public/   ‚îÇ  function App()  ‚îÇ              ‚îÇ
‚îÇ  ...       ‚îÇ  { ... }         ‚îÇ              ‚îÇ
‚îÇ            ‚îÇ                  ‚îÇ              ‚îÇ
‚îÇ            ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§              ‚îÇ
‚îÇ            ‚îÇ    Terminal      ‚îÇ              ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
### Atajos de Teclado
Ctrl/Cmd + S: Guardar archivo
Ctrl/Cmd + F: Buscar en archivo
Ctrl/Cmd + P: Abrir archivo r√°pido
Ctrl/Cmd + /: Comentar/descomentar l√≠nea
Alt + Click: M√∫ltiples cursores
Ctrl/Cmd + D: Seleccionar siguiente ocurrencia
### Vista Previa en Vivo
La vista previa se actualiza autom√°ticamente al guardar cambios. Si no funciona:

Haz clic en el bot√≥n "Run"
Espera a que se instalen las dependencias
El preview se cargar√° en ~30 segundos
--- ## Terminal y Comandos ### Comandos Comunes

# Instalar dependencias
npm install

# Iniciar servidor de desarrollo
npm run dev

# Construir para producci√≥n
npm run build

# Instalar paquete adicional
npm install nombre-paquete

# Ver logs
npm run dev --verbose
### Soluci√≥n de Problemas
Error: "Module not found"


npm install
npm run dev
El preview no carga


# Reiniciar servidor
Ctrl+C
npm run dev
--- ## Deploy a Producci√≥n ### Opci√≥n 1: Netlify (Recomendado)
Click en bot√≥n "Deploy"
Espera 1-2 minutos
Copia la URL: https://tu-app.netlify.app
¬°Listo! Tu app est√° online 24/7
Actualizar deploy:

Haz cambios en el c√≥digo
Click "Deploy" de nuevo
La URL se mantiene igual
### Opci√≥n 2: GitHub + Vercel
Click en "Push to GitHub"
Conecta tu cuenta de GitHub
Se crear√° un repositorio
Ve a [vercel.com](https://vercel.com)
Importa el repositorio
Deploy autom√°tico
### Opci√≥n 3: Descargar C√≥digo
Click en men√∫ (‚ãÆ)
"Descargar c√≥digo"
Descomprime el .zip
Hostea donde prefieras
--- ## Gesti√≥n de Cr√©ditos ### Ver tu Balance
Dashboard ‚Üí Icono de rayo (‚ö°) ‚Üí "X cr√©ditos disponibles"

### Comprar Cr√©ditos
Settings ‚Üí Billing
"Comprar Cr√©ditos"
Selecciona un paquete:
Starter: 10K tokens - $10
Pro: 50K tokens - $45 (10% off)
Business: 150K tokens - $120 (20% off)
Enterprise: 500K tokens - $350 (30% off)
Pago con tarjeta (Stripe seguro)
Cr√©ditos disponibles al instante
### Historial de Uso
Settings ‚Üí Billing ‚Üí "Historial de Transacciones"

Ver√°s:

Fecha y hora
Proyecto generado
Cr√©ditos consumidos
Cr√©ditos restantes
--- ## Preguntas Frecuentes ### ¬øLos cr√©ditos expiran?
No, los cr√©ditos que compras nunca expiran. Los cr√©ditos de planes mensuales se resetean cada mes.

### ¬øPuedo cancelar mi suscripci√≥n?
S√≠, en cualquier momento desde Settings ‚Üí Billing ‚Üí "Gestionar en Stripe"

### ¬øQu√© pasa si me quedo sin cr√©ditos a mitad de generaci√≥n?
La generaci√≥n se pausar√°. Puedes comprar m√°s cr√©ditos y continuar.

### ¬øPuedo usar AUTOCREA para proyectos comerciales?
S√≠, el c√≥digo generado es 100% tuyo. √ösalo como quieras.

### ¬øJoxCoder soporta otros lenguajes adem√°s de JavaScript?
Actualmente: JavaScript, TypeScript, HTML, CSS, Python (backend).
Pr√≥ximamente: Go, Rust, Java.

### ¬øHay l√≠mite de proyectos?
Free: 1 proyecto
Creator: 5 proyectos
Pro: 20 proyectos
Business+: Ilimitados
### ¬øPuedo colaborar con mi equipo?
S√≠, en planes Business+ puedes invitar colaboradores.

### ¬øPuedo ver el c√≥digo antes de consumir cr√©ditos?
No, pero tienes un estimado de cr√©ditos antes de generar. Empieza con descripciones cortas para probar.

--- ## Soporte
¬øNecesitas ayuda?

üìß Email: support@joxai.org
üí¨ Chat: Icono inferior derecha
üìö Docs: [docs.autocrea.joxai.org](https://docs.autocrea.joxai.org)
üé• Tutoriales: [YouTube](https://youtube.com/@joxai)
---
¬°Feliz creaci√≥n! üöÄ

GU√çA T√âCNICA (MARKDOWN):
markdown# Gu√≠a T√©cnica - AUTOCREA

## üîß Arquitectura T√©cnica ### Stack
Frontend:

Next.js 14 (App Router)
React 18
TypeScript
TailwindCSS
Monaco Editor
Xterm.js
WebContainers
Backend:

Convex (Database + Backend)
Clerk (Auth)
Stripe (Billing)
IA:

JoxCoder v1 (Hugging Face)
--- ## üì° API Reference ### Generar Aplicaci√≥n
Endpoint: POST /api/generate

Request:


{
  "userId": "user_abc123",
  "projectId": "prj_xyz789",
  "description": "Landing page para cafeter√≠a...",
  "framework": "react"
}
Response:


{
  "success": true,
  "files": {
    "index.html": "...",
    "styles.css": "body { ... }",
    "script.js": "const app = ..."
  },
  "creditsUsed": 5234,
  "generationTime": 45000
}
Errores:

400: Descripci√≥n vac√≠a o inv√°lida
402: Cr√©ditos insuficientes
429: Rate limit excedido
500: Error del modelo IA
--- ### Obtener Cr√©ditos
Endpoint: GET /api/credits/:userId

Response:


{
  "credits": 10000,
  "plan": "creator",
  "creditsUsedThisMonth": 3456,
  "resetDate": 1704067200000
}
--- ### Deploy a Netlify
Endpoint: POST /api/deploy

Request:


{
  "projectId": "prj_xyz789",
  "projectName": "my-cafe-landing",
  "files": { ... }
}
Response:


{
  "success": true,
  "url": "https://my-cafe-landing.netlify.app",
  "deployId": "deploy_123"
}
--- ## ü§ñ JoxCoder Prompting ### Prompt Structure
JoxCoder funciona mejor con prompts estructurados:


[OBJETIVO]
Descripci√≥n de qu√© quieres crear

[SECCIONES]
Lista detallada de secciones/componentes

[ESTILO]
Colores, fuentes, spacing, mood

[INTERACCIONES]
Animaciones, hover states, formularios

[RESPONSIVENESS]
Mobile, tablet, desktop requirements

[TECH STACK]
Framework, librer√≠as espec√≠ficas
### Ejemplos Optimizados
‚ùå Prompt Malo:


Crea una p√°gina web
‚úÖ Prompt Bueno:


Crea una landing page para SaaS de gesti√≥n de proyectos con:

SECCIONES:
1. Hero: T√≠tulo "Gestiona tus proyectos con IA", subt√≠tulo, CTA "Probar Gratis"
2. Features: 6 features con √≠conos
3. Pricing: 3 planes (Free, Pro, Enterprise)
4. Testimonials: 4 testimonios
5. CTA final

ESTILO:
- Moderno, profesional
- Colores: Azul (#3B82F6), gris oscuro
- Glassmorphism en cards
- Font: Inter

TECH:
- Next.js
- TailwindCSS
- Framer Motion para animaciones
--- ## üîí Seguridad ### Autenticaci√≥n
Usamos Clerk con JWT tokens:


import { auth } from '@clerk/nextjs';

export async function GET(req: Request) {
  const { userId } = auth();
  
  if (!userId) {
    return new Response('Unauthorized', { status: 401 });
  }
  
  // ... c√≥digo protegido
}
### Rate Limiting
10 generaciones por hora por usuario:


const { success } = await ratelimit.limit(`generate:${userId}`);

if (!success) {
  throw new Error('Rate limit exceeded');
}
### Sanitizaci√≥n
Todo c√≥digo generado pasa por sanitizaci√≥n antes de ejecutarse:


import DOMPurify from 'isomorphic-dompurify';

const sanitized = DOMPurify.sanitize(generatedCode);
--- ## üöÄ Deployment ### Netlify Integration

const netlify = new NetlifyDeployService();

const { url } = await netlify.deployProject(
  projectName,
  files
);

console.log('Deployed at:', url);
### Environment Variables
Necesitas configurar:


# .env.local
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=...
CLERK_SECRET_KEY=...
NEXT_PUBLIC_CONVEX_URL=...
HUGGINGFACE_API_KEY=...
NETLIFY_API_TOKEN=...
STRIPE_SECRET_KEY=...
--- ## üìä Monitoreo ### Logs
Usamos console.log con prefijos:


console.log('[GENERATE]', 'Starting generation for project:', projectId);
console.error('[ERROR]', 'Generation failed:', error);
### M√©tricas
Trackeamos:

Tiempo de generaci√≥n
Tokens consumidos
Tasa de √©xito/error
Latencia de preview
Deploy success rate
### Alertas
Configuradas en Sentry:

Errores > 5% en 1 hora
Latencia > 10s en generaci√≥n
Rate limit hits > 100/hora
--- ## üß™ Testing ### Unit Tests

npm run test
### E2E Tests

npm run test:e2e
### Test Coverage

npm run test:coverage
Objetivo: >80% coverage

--- ## üêõ Troubleshooting ### WebContainers no inicia
Causa: Navegador no compatible

Soluci√≥n: Usar Chrome/Edge/Brave recientes

--- ### Generaci√≥n lenta
Causa: Modelo IA sobrecargado

Soluci√≥n:

Reducir longitud del prompt
Usar templates pre-built
Intentar en horario de menor carga
--- ### Preview no carga
Causa: Error en c√≥digo generado

Soluci√≥n:

Revisar console en DevTools
Verificar que package.json tenga todas las deps
Re-ejecutar npm install
--- ## üìû Soporte T√©cnico
Para desarrolladores:

GitHub: [github.com/joxai/autocrea](https://github.com/joxai/autocrea)
Discord: [discord.gg/joxai](https://discord.gg/joxai)
Email: dev@joxai.org
OPTIMIZACIONES FINALES A. Lazy Loading de Componentes Pesados: typescriptimport dynamic from 'next/dynamic';
const MonacoEditor = dynamic(() => import('@/components/editor/MonacoEditor'), {
ssr: false,
loading: () => <LoadingSpinner message="Cargando editor..." />,
});

const Terminal = dynamic(() => import('@/components/terminal/Terminal'), {
ssr: false,
loading: () => <LoadingSpinner message="Inicializando terminal..." />,
});
B. Memoizaci√≥n de Componentes:
typescriptimport { memo } from 'react';

export const FileTreeNode = memo(({ node, onFileClick }: Props) => {
// ... componente
}, (prevProps, nextProps) => {
return prevProps.node.path === nextProps.node.path &&
prevProps.activeFile === nextProps.activeFile;
});
C. Debounce en B√∫squedas:
typescriptimport { useDebouncedCallback } from 'use-debounce';

const handleSearch = useDebouncedCallback((term: string) => {
setFilteredProjects(
projects.filter(p =>
p.name.toLowerCase().includes(term.toLowerCase())
)
);
}, 300);



---

### 20. CHECKLIST FINAL DE IMPLEMENTACI√ìN

**‚úÖ FUNCIONALIDADES CORE:**
- [ ] Landing page con dise√±o JoxAI
- [ ] Sistema de autenticaci√≥n (Clerk)
- [ ] Dashboard de proyectos
- [ ] Generador de aplicaciones con IA
- [ ] Editor de c√≥digo (Monaco)
- [ ] Terminal funcional (Xterm.js)
- [ ] Vista previa en vivo (WebContainers)
- [ ] File tree navegable
- [ ] Sistema de cr√©ditos/tokens
- [ ] Integraci√≥n con Stripe
- [ ] Deploy a Netlify
- [ ] Push a GitHub
- [ ] P√°gina de settings
- [ ] P√°gina de billing
- [ ] Documentaci√≥n

**‚úÖ INTEGRACIONES:**
- [ ] Clerk configurado
- [ ] Convex schema creado
- [ ] Stripe productos creados
- [ ] Hugging Face API conectada
- [ ] Netlify API token configurado
- [ ] GitHub OAuth (opcional)

**‚úÖ UX/UI:**
- [ ] Responsive design (m√≥vil + desktop)
- [ ] Loading states en todas las acciones
- [ ] Error handling con mensajes claros
- [ ] Toast notifications
- [ ] Confirmaciones antes de acciones destructivas
- [ ] Empty states informativos
- [ ] Skeleton loaders

**‚úÖ PERFORMANCE:**
- [ ] Lazy loading de componentes pesados
- [ ] Debounce en b√∫squedas
- [ ] Memoizaci√≥n de componentes
- [ ] Code splitting
- [ ] Im√°genes optimizadas

**‚úÖ SEGURIDAD:**
- [ ] Rate limiting
- [ ] Sanitizaci√≥n de inputs
- [ ] CORS configurado
- [ ] Environment variables seguras
- [ ] Webhooks verificados (Stripe, Clerk)

**‚úÖ MONITOREO:**
- [ ] Error tracking (Sentry)
- [ ] Analytics (PostHog)
- [ ] Logs estructurados
- [ ] M√©tricas de uso

---

### 21. PROMPT FINAL PARA BOLT
Crea AUTOCREA - Plataforma completa de generaci√≥n de aplicaciones con IA siguiendo EXACTAMENTE todas las especificaciones de este prompt.

CR√çTICO:

Usa los colores exactos del ecosistema JoxAI (#4A90E2, #9B59B6, #00D9FF, #0A0E27)
Implementa TODAS las funcionalidades mencionadas
El dise√±o debe ser moderno, oscuro y profesional (similar a Replit pero mejor)
Todo debe estar 100% funcional, sin placeholders
Usa Clerk (ya configurado en Bolt) para auth
Usa Stripe API (ya configurada) para pagos
Integra Monaco Editor para edici√≥n de c√≥digo
Integra Xterm.js para terminal funcional
Usa WebContainers para ejecutar c√≥digo en el navegador
Convex para base de datos (schema incluido en el prompt)
P√ÅGINAS REQUERIDAS:

Landing page (hero, c√≥mo funciona, ejemplos, pricing, features)
/dashboard (lista de proyectos estilo grid/list)
/projects/new (formulario de generaci√≥n con IA)
/projects/[id] (IDE completo: editor + terminal + preview)
/settings/account
/settings/billing
/settings/usage
/docs
FUNCIONALIDADES CR√çTICAS:

Generaci√≥n de apps con JoxCoder (llamada a Hugging Face API)
Sistema de cr√©ditos con Convex
Editor Monaco con syntax highlighting
Terminal Xterm.js con comandos reales
Preview en vivo con iframe
File tree navegable
Deploy a Netlify
Push a GitHub
Compra de cr√©ditos con Stripe
ESTILO VISUAL:

Dark mode obligatorio
Gradientes: linear-gradient(135deg, #4A90E2, #9B59B6)
Glassmorphism en cards
Bordes con glow: border-[#4A90E2]/20, shadow con color primario
Animaciones fluidas (transitions 0.3s)
Tipograf√≠a: Inter o SF Pro Display
Genera TODO el c√≥digo necesario, incluyendo:

Todas las p√°ginas
Todos los componentes
Todos los servicios (Hugging Face, Netlify, GitHub)
Schema de Convex
Configuraci√≥n de Clerk y Stripe
Hooks personalizados
Utilidades y helpers
NO OMITAS NINGUNA FUNCIONALIDAD. Este proyecto debe quedar production-ready.

‚ú® RESUMEN EJECUTIVO
Has recibido el prompt M√ÅS COMPLETO posible para crear AUTOCREA en Bolt. Incluye:
‚úÖ 16,000+ l√≠neas de especificaciones detalladas
‚úÖ C√≥digo completo de todos los componentes principales
‚úÖ Integraci√≥n con todas las APIs necesarias
‚úÖ Dise√±o visual exacto (colores JoxAI)
‚úÖ Funcionalidades id√©nticas a Replit
‚úÖ Gu√≠as de usuario y t√©cnica completas
‚úÖ Sistema de cr√©ditos funcional
‚úÖ Deploy autom√°tico
‚úÖ Terminal y editor profesionales
‚úÖ WebContainers para ejecuci√≥n de c√≥digo
Este prompt est√° listo para copiar y pegar en Bolt. No necesitas agregar nada m√°s.
üöÄ AUTOCREA ser√° una aplicaci√≥n incre√≠ble que superar√° a la competencia.

Ahi te deje una tabla de colores que quiero en AUTOCREA.

Sigue las indicaciones del prompt al pie de la letra.